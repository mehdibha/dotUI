{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-slider",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/high-contrast/field.json",
    "http://localhost:3000/r/high-contrast/color-thum.json"
  ],
  "files": [
    {
      "path": "src/registry/high-contrast/ui/color-slider.tsx",
      "content": "\"use client\";\n\nimport {\n  composeRenderProps,\n  ColorSlider as AriaColorSlider,\n  SliderOutput as AriaSliderOutput,\n  SliderTrack as AriaSliderTrack,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { ColorThumb } from \"@/registry/high-contrast/ui/color-thumb\";\nimport { Label } from \"@/registry/high-contrast/ui/field\";\n\nconst colorSliderStyles = tv({\n  slots: {\n    root: \"group flex flex-col gap-2\",\n    output: \"text-fg-muted text-sm\",\n    track:\n      \"disabled:[background:var(--color-bg-disabled)]! relative rounded-md before:absolute before:inset-0 before:z-[-1] before:rounded-[inherit] before:bg-[repeating-conic-gradient(#e6e6e6_0%_25%,_#fff_0%_50%)] before:bg-[length:16px_16px] before:bg-center before:content-['']\",\n    thumb: \"\",\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        root: \"w-48\",\n        track: \"h-6 w-full\",\n        thumb: \"top-1/2\",\n      },\n      vertical: {\n        root: \"h-48 items-center\",\n        track: \"w-6 flex-1\",\n        thumb: \"left-1/2\",\n      },\n    },\n  },\n  defaultVariants: {\n    orientation: \"horizontal\",\n  },\n});\n\nconst { root, track, thumb, output } = colorSliderStyles();\n\ninterface ColorSliderProps extends ColorSliderRootProps {\n  showValueLabel?: boolean;\n  label?: string;\n}\nconst ColorSlider = ({\n  label,\n  channel,\n  showValueLabel = false,\n  ...props\n}: ColorSliderProps) => {\n  return (\n    <ColorSliderRoot channel={channel} {...props}>\n      {(label || showValueLabel) && (\n        <div className=\"grid grid-cols-[1fr_auto] [grid-template-areas:'label_value']\">\n          {label && <Label className=\"[grid-area:label]\">{label}</Label>}\n          {showValueLabel && (\n            <ColorSliderOutput className=\"[grid-area:value]\" />\n          )}\n        </div>\n      )}\n      <ColorSliderControl />\n    </ColorSliderRoot>\n  );\n};\n\ninterface ColorSliderRootProps\n  extends React.ComponentProps<typeof AriaColorSlider> {}\nconst ColorSliderRoot = ({ className, ...props }: ColorSliderRootProps) => {\n  return (\n    <AriaColorSlider\n      className={composeRenderProps(className, (className, { orientation }) =>\n        root({ orientation, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface ColorSliderControlProps\n  extends React.ComponentProps<typeof AriaSliderTrack> {}\nconst ColorSliderControl = ({\n  className,\n  ...props\n}: ColorSliderControlProps) => {\n  return (\n    <AriaSliderTrack\n      className={composeRenderProps(className, (className, { orientation }) =>\n        track({ orientation, className })\n      )}\n      {...props}\n    >\n      {({ orientation }) => <ColorThumb className={thumb({ orientation })} />}\n    </AriaSliderTrack>\n  );\n};\n\ninterface ColorSliderOutputProps\n  extends React.ComponentProps<typeof AriaSliderOutput> {}\nconst ColorSliderOutput = ({ className, ...props }: ColorSliderOutputProps) => {\n  return (\n    <AriaSliderOutput\n      className={composeRenderProps(className, (className) =>\n        output({ className })\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type {\n  ColorSliderProps,\n  ColorSliderRootProps,\n  ColorSliderControlProps,\n  ColorSliderOutputProps,\n};\nexport { ColorSlider, ColorSliderRoot, ColorSliderOutput, ColorSliderControl };\n",
      "type": "registry:ui",
      "target": "ui/color-slider.tsx"
    }
  ]
}