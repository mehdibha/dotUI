{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "dependencies": [
    "@react-aria/utils",
    "@react-stately/utils"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/high-contrast/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/high-contrast/ui/input.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { mergeRefs, chain, mergeProps } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Provider,\n  composeRenderProps,\n  Input as AriaInput,\n  Group as AriaGroup,\n  TextArea as AriaTextArea,\n  InputContext as AriaInputContext,\n  TextAreaContext as AriaTextAreaContext,\n  useContextProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusInput } from \"@/modules/registry/lib/focus-styles\";\n\nconst inputStyles = tv({\n  slots: {\n    root: [\n      focusInput(),\n      \"border-border-field bg-bg text-fg-muted shadow-xs inline-flex w-full cursor-text items-center justify-start gap-2 rounded-md border px-2 text-base transition-colors sm:text-sm [&_svg]:size-4\",\n      \"has-[input[data-disabled]]:border-border-disabled has-[input[data-disabled]]:bg-bg-disabled has-[input[data-disabled]]:text-fg-disabled has-[input[data-disabled]]:cursor-default\",\n      \"has-[input[data-invalid]]:border-border-danger focus-within:has-[input[data-invalid]]:border-border\",\n    ],\n    input: [\n      \"text-fg placeholder:text-fg-muted disabled:text-fg-disabled outline-hidden min-w-0 bg-transparent disabled:cursor-default\",\n    ],\n  },\n  variants: {\n    size: {\n      sm: { root: \"h-8\" },\n      md: { root: \"h-9\" },\n      lg: { root: \"h-10\" },\n    },\n    multiline: {\n      true: {\n        root: \"h-auto flex-col items-stretch p-2\",\n        input: \"min-h-14 resize-none overflow-auto\",\n      },\n      false: {\n        input: \"flex-1\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n    multiline: false,\n  },\n});\n\nconst { root, input } = inputStyles();\n\ninterface InputProps extends React.ComponentProps<typeof AriaInput> {}\nconst Input = ({ className, ...props }: InputProps) => {\n  return (\n    <AriaInput\n      className={composeRenderProps(className, (className) =>\n        input({ className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface TextAreaInputProps\n  extends React.ComponentProps<typeof AriaTextArea> {}\nconst TextAreaInput = ({\n  ref,\n  className,\n  onChange,\n  ...props\n}: TextAreaInputProps) => {\n  const [inputValue, setInputValue] = useControlledState(\n    props.value,\n    props.defaultValue ?? \"\",\n    () => {}\n  );\n  const inputRef = React.useRef<HTMLTextAreaElement>(null);\n\n  const onHeightChange = React.useCallback(() => {\n    if (!inputRef.current) return;\n    const input = inputRef.current;\n    const prevAlignment = input.style.alignSelf;\n    const prevOverflow = input.style.overflow;\n    const isFirefox = \"MozAppearance\" in input.style;\n    if (!isFirefox) {\n      input.style.overflow = \"hidden\";\n    }\n    input.style.alignSelf = \"start\";\n    input.style.height = \"auto\";\n    input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n    input.style.overflow = prevOverflow;\n    input.style.alignSelf = prevAlignment;\n  }, [inputRef]);\n\n  React.useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n\n  return (\n    <AriaTextArea\n      ref={mergeRefs(inputRef, ref)}\n      className={composeRenderProps(className, (className) =>\n        input({ multiline: true, className })\n      )}\n      onChange={chain(onChange, setInputValue)}\n      {...props}\n    />\n  );\n};\n\ninterface InputRootProps\n  extends Omit<React.ComponentProps<typeof AriaGroup>, \"prefix\">,\n    VariantProps<typeof inputStyles> {\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\nconst InputRoot = ({\n  children,\n  className,\n  prefix,\n  suffix,\n  size,\n  multiline,\n  ...props\n}: InputRootProps) => {\n  const inputRef = React.useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  const [inputContextProps, mergedInputRef] = useContextProps(\n    {},\n    inputRef as React.RefObject<HTMLInputElement>,\n    AriaInputContext\n  );\n  const [textAreaContextProps, mergedTextAreaRef] = useContextProps(\n    {},\n    inputRef as React.RefObject<HTMLTextAreaElement>,\n    AriaTextAreaContext\n  );\n  const inputProps = { ...inputContextProps, ref: mergedInputRef };\n  const textAreaProps = { ...textAreaContextProps, ref: mergedTextAreaRef };\n\n  const onPointerDown = (event: React.PointerEvent<HTMLElement>) => {\n    const target = event.target as HTMLElement;\n    if (target.closest(\"input, button, a\")) return;\n    const input = inputRef.current;\n    if (!input) return;\n    requestAnimationFrame(() => {\n      input.focus();\n    });\n  };\n\n  return (\n    <AriaGroup\n      role=\"presentation\"\n      className={composeRenderProps(className, (className) =>\n        root({ size, multiline, className })\n      )}\n      {...mergeProps(props, { onPointerDown })}\n    >\n      {composeRenderProps(children, (children) => (\n        <Provider\n          values={[\n            [AriaInputContext, inputProps],\n            [AriaTextAreaContext, textAreaProps],\n          ]}\n        >\n          {prefix}\n          {children}\n          {suffix}\n        </Provider>\n      ))}\n    </AriaGroup>\n  );\n};\n\nexport type { InputProps, TextAreaInputProps, InputRootProps };\nexport { Input, TextAreaInput, InputRoot, inputStyles };\n",
      "type": "registry:ui"
    }
  ]
}