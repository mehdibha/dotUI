{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:ui",
  "description": "Minimal with a subtle border and muted background.",
  "files": [
    {
      "path": "src/registry/retro/ui/alert.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  AlertCircleIcon,\n  AlertTriangleIcon,\n  CheckCircle2Icon,\n  InfoIcon,\n} from \"lucide-react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { createScopedContext } from \"@/registry/retro/lib/utils\";\n\nconst alertStyles = tv({\n  slots: {\n    root: \"@container flex w-full items-center gap-4 rounded-lg border p-4 text-sm [&_svg]:size-4\",\n    title: \"text-base font-medium leading-normal tracking-tight\",\n    content: \"text-fg-muted\",\n  },\n  variants: {\n    variant: {\n      neutral: { root: \"bg-bg-muted text-fg border\" },\n      success: {\n        root: \"bg-bg-success-muted border-border-success text-fg-success border\",\n      },\n      warning: {\n        root: \"bg-bg-warning-muted border-border-warning text-fg-warning border\",\n      },\n      danger: {\n        root: \"bg-bg-danger-muted border-border-danger text-fg-danger border\",\n      },\n      info: {\n        root: \"bg-bg-info-muted border-border-info text-fg-info border\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"neutral\",\n  },\n});\n\nconst { root, title, content } = alertStyles();\n\nconst [AlertProvider, useAlertContext] =\n  createScopedContext<VariantProps<typeof alertStyles>>(\"AlertRoot\");\n\nconst defaultIcons = {\n  neutral: <InfoIcon />,\n  danger: <AlertCircleIcon />,\n  success: <CheckCircle2Icon />,\n  warning: <AlertTriangleIcon />,\n  info: <InfoIcon />,\n};\n\ninterface AlertProps extends AlertRootProps {\n  title?: string;\n  action?: React.ReactNode;\n  icon?: React.ReactNode | null;\n}\n\nfunction Alert({\n  variant = \"neutral\",\n  title,\n  action,\n  icon,\n  children,\n  ...props\n}: AlertProps) {\n  const resolvedIcon = icon === undefined ? defaultIcons[variant] : icon;\n  return (\n    <AlertRoot variant={variant} {...props}>\n      {resolvedIcon}\n      <div className=\"@sm:items-center @sm:flex-row flex flex-1 flex-col items-start gap-4\">\n        <div className=\"flex-1 space-y-0.5\">\n          {title && <AlertTitle>{title}</AlertTitle>}\n          {children && <AlertContent>{children}</AlertContent>}\n        </div>\n        {action}\n      </div>\n    </AlertRoot>\n  );\n}\n\ninterface AlertRootProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof alertStyles> {}\n\nfunction AlertRoot({ className, variant, ...props }: AlertRootProps) {\n  return (\n    <AlertProvider variant={variant}>\n      <div role=\"alert\" className={root({ variant, className })} {...props} />\n    </AlertProvider>\n  );\n}\n\ninterface AlertTitleProps extends React.ComponentProps<\"h5\"> {}\n\nfunction AlertTitle({ className, ...props }: AlertTitleProps) {\n  const { variant } = useAlertContext(\"AlertTitle\");\n  return <h5 className={title({ variant, className })} {...props} />;\n}\n\ninterface AlertContentProps extends React.ComponentProps<\"p\"> {}\n\nfunction AlertContent({ className, ...props }: AlertContentProps) {\n  const { variant } = useAlertContext(\"AlertTitle\");\n  return <div className={content({ variant, className })} {...props} />;\n}\n\nexport type { AlertProps, AlertRootProps, AlertTitleProps, AlertContentProps };\nexport { Alert, AlertRoot, AlertTitle, AlertContent };\n",
      "type": "registry:ui"
    }
  ]
}