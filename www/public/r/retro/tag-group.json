{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-group",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/retro/field.json",
    "http://localhost:3000/r/retro/button.json",
    "http://localhost:3000/r/retro/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/retro/ui/tag-group.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport {\r\n  composeRenderProps,\r\n  TagGroup as AriaTagGroup,\r\n  TagList as AriaTagList,\r\n  Tag as AriaTag,\r\n  type TagGroupProps as AriaTagGroupProps,\r\n  type TagListProps as AriaTagListProps,\r\n  type TagProps as AriaTagProps,\r\n} from \"react-aria-components\";\r\nimport { tv, VariantProps } from \"tailwind-variants\";\r\nimport { focusRing } from \"@/registry/retro/lib/focus-styles\";\r\nimport { Button } from \"@/registry/retro/ui/button_basic\";\r\nimport { HelpText, Label, type FieldProps } from \"@/registry/retro/ui/field_basic\";\r\n\r\nconst tagGroupStyles = tv({\r\n  slots: {\r\n    root: \"flex w-48 flex-col items-start gap-2\",\r\n    list: \"flex w-full flex-wrap gap-1\",\r\n  },\r\n});\r\n\r\nconst { root, list } = tagGroupStyles();\r\n\r\nconst tagStyles = tv({\r\n  extend: focusRing,\r\n  base: \"ring-offset-background disabled:bg-bg-disabled disabled:text-fg-disabled inline-flex cursor-pointer items-center justify-center gap-2 rounded-md text-sm font-medium leading-normal transition-colors disabled:cursor-default\",\r\n  variants: {\r\n    variant: {\r\n      default:\r\n        \"bg-bg-neutral hover:bg-bg-neutral-hover pressed:bg-bg-neutral-active text-fg-onNeutral selected:bg-bg-primary selected:text-fg-onPrimary\",\r\n      quiet:\r\n        \"hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 text-fg selected:bg-bg-primary selected:text-fg-onPrimary bg-transparent\",\r\n      outline:\r\n        \"border-border-field bg-bg-inverse/5 hover:bg-bg-inverse/10 pressed:bg-bg-inverse/15 pressed:border-transparent text-fg selected:bg-bg-primary selected:border-transparent selected:text-fg-onPrimary border\",\r\n      accent:\r\n        \"border-border-field hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 pressed:border-transparent text-fg selected:bg-bg-accent selected:border-transparent selected:hover:bg-bg-accent-hover selected:pressed:bg-bg-accent-active selected:text-fg-onAccent border bg-transparent\",\r\n    },\r\n    size: {\r\n      sm: \"size-8 [&_svg]:size-4\",\r\n      md: \"size-9 [&_svg]:size-4\",\r\n      lg: \"size-10 [&_svg]:size-5\",\r\n    },\r\n    shape: {\r\n      rectangle: \"\",\r\n      square: \"\",\r\n      circle: \"rounded-full\",\r\n    },\r\n  },\r\n  compoundVariants: [\r\n    {\r\n      size: \"sm\",\r\n      shape: \"rectangle\",\r\n      className: \"w-auto px-3\",\r\n    },\r\n    {\r\n      size: \"md\",\r\n      shape: \"rectangle\",\r\n      className: \"w-auto px-4\",\r\n    },\r\n    {\r\n      size: \"lg\",\r\n      shape: \"rectangle\",\r\n      className: \"w-auto px-5\",\r\n    },\r\n  ],\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n    size: \"md\",\r\n    shape: \"rectangle\",\r\n  },\r\n});\r\n\r\ninterface TagGroupProps<T>\r\n  extends Omit<TagGroupRootProps, \"children\">,\r\n    Pick<AriaTagListProps<T>, \"items\" | \"children\" | \"renderEmptyState\">,\r\n    FieldProps {}\r\n\r\nfunction TagGroup<T extends object>({\r\n  label,\r\n  description,\r\n  errorMessage,\r\n  items,\r\n  children,\r\n  renderEmptyState,\r\n  ...props\r\n}: TagGroupProps<T>) {\r\n  return (\r\n    <TagGroupRoot {...props}>\r\n      {label && <Label>{label}</Label>}\r\n      <TagList items={items} renderEmptyState={renderEmptyState}>\r\n        {children}\r\n      </TagList>\r\n      <HelpText description={description} errorMessage={errorMessage} />\r\n    </TagGroupRoot>\r\n  );\r\n}\r\n\r\ninterface TagGroupRootProps\r\n  extends AriaTagGroupProps,\r\n    VariantProps<typeof tagStyles> {}\r\nfunction TagGroupRoot({\r\n  className,\r\n  variant,\r\n  size,\r\n  shape,\r\n  ...props\r\n}: TagGroupRootProps) {\r\n  return (\r\n    <TagGroupContext.Provider value={{ variant, size, shape }}>\r\n      <AriaTagGroup {...props} className={root({ className })} />\r\n    </TagGroupContext.Provider>\r\n  );\r\n}\r\n\r\ninterface TagListProps<T> extends AriaTagListProps<T> {}\r\nfunction TagList<T extends object>(props: TagListProps<T>) {\r\n  return (\r\n    <AriaTagList\r\n      {...props}\r\n      className={composeRenderProps(props.className, (className) =>\r\n        list({ className })\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\ninterface TagProps extends AriaTagProps, VariantProps<typeof tagStyles> {}\r\nfunction Tag(localProps: TagProps) {\r\n  const contextProps = useTagGroupContext();\r\n  const props = { ...contextProps, ...localProps };\r\n  const { children, variant, size, shape, className, ...restProps } = props;\r\n  const textValue =\r\n    typeof props.children === \"string\" ? props.children : undefined;\r\n  return (\r\n    <AriaTag\r\n      textValue={textValue}\r\n      className={composeRenderProps(className, (className) =>\r\n        tagStyles({ variant, size, shape, className })\r\n      )}\r\n      {...restProps}\r\n    >\r\n      {composeRenderProps(children, (children, { allowsRemoving }) => (\r\n        <>\r\n          {children}\r\n          {allowsRemoving && <Button slot=\"remove\">â“§</Button>}\r\n        </>\r\n      ))}\r\n    </AriaTag>\r\n  );\r\n}\r\n\r\ntype TagGroupContextValue = VariantProps<typeof tagGroupStyles>;\r\nconst TagGroupContext = React.createContext<TagGroupContextValue>({});\r\nconst useTagGroupContext = () => {\r\n  return React.useContext(TagGroupContext);\r\n};\r\n\r\nexport { TagGroup, Tag };\r\nexport type { TagGroupProps, TagProps };\r\n",
      "type": "registry:ui",
      "target": "ui/tag-group.tsx"
    }
  ]
}