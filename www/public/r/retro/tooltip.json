{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tooltip",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/registry/retro/ui/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Tooltip as AriaTooltip,\n  TooltipTrigger as AriaTooltipTrigger,\n  OverlayArrow as AriaOverlayArrow,\n  composeRenderProps,\n} from \"react-aria-components\";\nimport { tv, VariantProps } from \"tailwind-variants\";\nimport { createScopedContext } from \"@/modules/registry/lib/utils\";\n\n// TODO: Remove tailwindcss-animate an replace it with css transitions\n\nconst tooltipStyles = tv({\n  slots: {\n    content:\n      \"group/tooltip text-fg entering:animate-in entering:fade-in entering:placement-bottom:slide-in-from-top-0.5 entering:placement-top:slide-in-from-bottom-0.5 entering:placement-left:slide-in-from-right-0.5 entering:placement-right:slide-in-from-left-0.5 exiting:animate-out exiting:fade-out exiting:placement-bottom:slide-out-to-top-0.5 exiting:placement-top:slide-out-to-bottom-0.5 exiting:placement-left:slide-out-to-right-0.5 exiting:placement-right:slide-out-to-left-0.5 entering:ease-out exiting:ease-out entering:duration-150 exiting:duration-100 z-50 rounded-md px-3 py-1.5 text-sm shadow-md\",\n    arrow:\n      \"group-placement-left/tooltip:-rotate-90 group-placement-right/tooltip:rotate-90 group-placement-bottom/tooltip:rotate-180\",\n  },\n  variants: {\n    variant: {\n      default: {\n        content: \"bg-bg-muted border\",\n        arrow: \"fill-bg-muted stroke-border\",\n      },\n      inverse: {\n        content: \"bg-bg-inverse text-fg-inverse\",\n        arrow: \"fill-bg-inverse\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst { content, arrow } = tooltipStyles();\n\nconst [TooltipProvider, useTooltipContext] =\n  createScopedContext<VariantProps<typeof tooltipStyles>>(\"TooltipRoot\");\n\ninterface TooltipProps\n  extends TooltipRootProps,\n    Omit<TooltipContentProps, \"children\"> {\n  content?: React.ReactNode;\n  showArrow?: boolean;\n}\nconst Tooltip = ({\n  delay,\n  closeDelay,\n  trigger,\n  defaultOpen,\n  isOpen,\n  onOpenChange,\n  isDisabled,\n  content,\n  showArrow = false,\n  children,\n  ...props\n}: TooltipProps) => {\n  return (\n    <TooltipRoot\n      delay={delay}\n      closeDelay={closeDelay}\n      trigger={trigger}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      isOpen={isOpen}\n      isDisabled={isDisabled}\n    >\n      {children}\n      <TooltipContent {...props}>\n        {showArrow && <TooltipArrow />}\n        {content}\n      </TooltipContent>\n    </TooltipRoot>\n  );\n};\n\ninterface TooltipRootProps\n  extends React.ComponentProps<typeof AriaTooltipTrigger> {}\nconst TooltipRoot = ({\n  delay = 700,\n  closeDelay = 0,\n  ...props\n}: TooltipRootProps) => (\n  <AriaTooltipTrigger delay={delay} closeDelay={closeDelay} {...props} />\n);\n\ninterface TooltipContentProps\n  extends React.ComponentProps<typeof AriaTooltip>,\n    VariantProps<typeof tooltipStyles> {}\nfunction TooltipContent({\n  variant,\n  offset = 10,\n  className,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipProvider variant={variant}>\n      <AriaTooltip\n        offset={offset}\n        className={composeRenderProps(className, (className) =>\n          content({ variant, className })\n        )}\n        {...props}\n      />\n    </TooltipProvider>\n  );\n}\n\ninterface TooltipArrowProps extends React.ComponentProps<\"svg\"> {}\nfunction TooltipArrow({ className, ...props }: TooltipArrowProps) {\n  const { variant } = useTooltipContext(\"TooltipArrow\");\n  return (\n    <AriaOverlayArrow>\n      <svg\n        width={8}\n        height={8}\n        viewBox=\"0 0 8 8\"\n        className={arrow({ variant, className })}\n        {...props}\n      >\n        <path d=\"M0 0 L4 4 L8 0\" />\n      </svg>\n    </AriaOverlayArrow>\n  );\n}\n\nexport type {\n  TooltipProps,\n  TooltipRootProps,\n  TooltipContentProps,\n  TooltipArrowProps,\n};\nexport { Tooltip, TooltipRoot, TooltipContent, TooltipArrow };\n",
      "type": "registry:ui"
    }
  ]
}