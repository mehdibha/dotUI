{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-group",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/retro/focus-styles.json",
    "http://localhost:3000/r/retro/field.json"
  ],
  "files": [
    {
      "path": "src/registry/retro/ui/radio-group.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Radio as AriaRadio,\n  RadioGroup as AriaRadioGroup,\n  composeRenderProps,\n  type ValidationResult,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusRing, focusRingGroup } from \"@/registry/retro/lib/focus-styles\";\nimport {\n  createOptionalScopedContext,\n  createScopedContext,\n} from \"@/registry/retro/lib/utils\";\nimport { HelpText, Label } from \"@/registry/retro/ui/field\";\n\nconst radioStyles = tv({\n  slots: {\n    root: \"disabled:text-fg-disabled invalid:text-fg-danger group flex cursor-pointer flex-row items-center gap-2 disabled:cursor-default\",\n    indicator: [\n      focusRing(),\n      \"border-border-control group-selected:border-bg-primary group-selected:border-4 relative size-4 shrink-0 rounded-full border transition-all duration-100\",\n      \"group-disabled:border-border-disabled selected:group-disabled:bg-bg-disabled indeterminate:group-disabled:bg-bg-disabled\",\n      \"group-invalid:border-border-danger group-invalid:selected:border-bg-danger\",\n    ],\n  },\n  variants: {\n    variant: {\n      default: {\n        indicator: focusRingGroup(),\n      },\n      card: {\n        root: [\n          focusRing(),\n          \"selected:bg-bg-muted disabled:selected:bg-bg-disabled disabled:border-border-disabled flex-row-reverse gap-4 rounded-md border p-4 transition-colors\",\n        ],\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst { root, indicator } = radioStyles();\n\nconst [VariantsProvider, useVariantsContext] =\n  createScopedContext<VariantProps<typeof radioStyles>>(\"RadioRoot\");\n\nconst [RadioProvider, useRadioContext] =\n  createOptionalScopedContext<VariantProps<typeof radioStyles>>(\"Radio\");\n\ninterface RadioProps extends RadioRootProps {}\nconst Radio = ({ children, ...props }: RadioProps) => {\n  return (\n    <RadioRoot {...props}>\n      {composeRenderProps(children, (children) => (\n        <>\n          <RadioIndicator />\n          {children}\n        </>\n      ))}\n    </RadioRoot>\n  );\n};\n\ninterface RadioRootProps\n  extends React.ComponentProps<typeof AriaRadio>,\n    VariantProps<typeof radioStyles> {}\n\nconst RadioRoot = (localProps: RadioRootProps) => {\n  const contextProps = useRadioContext();\n  const { variant, className, ...props } = { ...contextProps, ...localProps };\n  return (\n    <VariantsProvider variant={variant}>\n      <AriaRadio\n        className={composeRenderProps(className, (className) =>\n          root({ variant, className })\n        )}\n        {...props}\n      />\n    </VariantsProvider>\n  );\n};\n\ninterface RadioIndicatorProps extends React.ComponentProps<\"div\"> {}\n\nconst RadioIndicator = ({ className, ...props }: RadioIndicatorProps) => {\n  const { variant } = useVariantsContext(\"RadioIndicator\");\n  return <div className={indicator({ variant, className })} {...props} />;\n};\n\nconst radioGroupStyles = tv({\n  slots: {\n    root: \"flex flex-col gap-2\",\n    wrapper: \"flex gap-1\",\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        wrapper: \"flex-row gap-2\",\n      },\n      vertical: {\n        wrapper: \"flex-col\",\n      },\n    },\n  },\n});\n\nconst { root: radioGroupRoot, wrapper } = radioGroupStyles();\n\ninterface RadioGroupProps extends RadioGroupRootProps {\n  label?: string;\n  description?: string;\n  errorMessage?: string | ((validation: ValidationResult) => string);\n}\n\nconst RadioGroup = ({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: RadioGroupProps) => {\n  return (\n    <RadioGroupRoot {...props}>\n      {composeRenderProps(children, (children, { orientation }) => (\n        <>\n          {label && <Label>{label}</Label>}\n          <div className={wrapper({ orientation })}>{children}</div>\n          <HelpText description={description} errorMessage={errorMessage} />\n        </>\n      ))}\n    </RadioGroupRoot>\n  );\n};\n\ninterface RadioGroupRootProps\n  extends React.ComponentProps<typeof AriaRadioGroup>,\n    VariantProps<typeof radioGroupStyles>,\n    VariantProps<typeof radioStyles> {}\n\nconst RadioGroupRoot = ({\n  variant,\n  className,\n  ...props\n}: RadioGroupRootProps) => {\n  return (\n    <RadioProvider variant={variant}>\n      <AriaRadioGroup\n        className={composeRenderProps(className, (className) =>\n          radioGroupRoot({ className })\n        )}\n        {...props}\n      />\n    </RadioProvider>\n  );\n};\n\nexport type { RadioProps, RadioRootProps, RadioIndicatorProps };\nexport { Radio, RadioRoot, RadioIndicator };\n\nexport type { RadioGroupProps, RadioGroupRootProps };\nexport { RadioGroup, RadioGroupRoot };\n",
      "type": "registry:ui"
    }
  ]
}