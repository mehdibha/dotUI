{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/material/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/material/ui/checkbox.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { CheckIcon, MinusIcon } from \"lucide-react\";\nimport {\n  Checkbox as AriaCheckbox,\n  composeRenderProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusRing, focusRingGroup } from \"@/registry/material/lib/focus-styles\";\nimport {\n  createScopedContext,\n  createOptionalScopedContext,\n} from \"@/registry/material/lib/utils\";\n\nconst checkboxStyles = tv({\n  slots: {\n    root: \"invalid:text-fg-danger disabled:text-fg-disabled group flex cursor-pointer flex-row items-center gap-2 disabled:cursor-default\",\n    indicator: [\n      \"border-border-control flex size-4 shrink-0 cursor-pointer items-center justify-center rounded-sm border\",\n      \"group-selected:border-transparent bg-transparent text-transparent transition-colors duration-75 group-indeterminate:border-transparent\",\n      \"group-read-only:cursor-default\",\n      \"group-disabled:border-border-disabled group-selected:group-disabled:text-fg-disabled group-selected:group-disabled:bg-bg-disabled group-indeterminate:group-disabled:bg-bg-disabled group-disabled:cursor-default\",\n      \"group-invalid:border-border-danger group-invalid:group-selected:bg-bg-danger-muted group-invalid:group-selected:text-fg-onMutedDanger\",\n    ],\n  },\n  variants: {\n    variant: {\n      primary: {\n        indicator:\n          \"group-selected:bg-bg-primary group-selected:text-fg-onPrimary group-indeterminate:bg-bg-primary group-indeterminate:text-fg-onPrimary\",\n      },\n      accent: {\n        indicator:\n          \"group-selected:bg-bg-accent group-selected:text-fg-onAccent group-indeterminate:bg-bg-Accent group-indeterminate:text-fg-onAccent\",\n      },\n    },\n    appearance: {\n      default: {\n        indicator: focusRingGroup(),\n      },\n      card: {\n        root: [\n          focusRing(),\n          \"disabled:selected:bg-bg-disabled disabled:border-border-disabled flex-row-reverse justify-between gap-4 rounded-md border p-4 transition-colors\",\n        ],\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      appearance: \"card\",\n      variant: \"primary\",\n      className: {\n        root: \"selected:bg-bg-muted\",\n      },\n    },\n    {\n      appearance: \"card\",\n      variant: \"accent\",\n      className: {\n        root: \"selected:bg-bg-accent-muted\",\n      },\n    },\n  ],\n  defaultVariants: {\n    variant: \"primary\",\n    appearance: \"default\",\n  },\n});\n\nconst { root, indicator } = checkboxStyles();\n\nconst [VariantsProvider, useVariantsContext] = createScopedContext<\n  VariantProps<typeof checkboxStyles> & { isIndeterminate: boolean }\n>(\"CheckboxRoot\");\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createOptionalScopedContext<VariantProps<typeof checkboxStyles>>(\"Checkbox\");\n\ninterface CheckboxProps extends CheckboxRootProps {}\nconst Checkbox = ({ children, ...props }: CheckboxProps) => {\n  return (\n    <CheckboxRoot {...props}>\n      {composeRenderProps(children, (children) => (\n        <>\n          <CheckboxIndicator />\n          {children}\n        </>\n      ))}\n    </CheckboxRoot>\n  );\n};\n\ninterface CheckboxRootProps\n  extends React.ComponentProps<typeof AriaCheckbox>,\n    VariantProps<typeof checkboxStyles> {}\n\nconst CheckboxRoot = (localProps: CheckboxRootProps) => {\n  const contextProps = useCheckboxContext();\n  const { variant, appearance, className, ...props } = {\n    ...contextProps,\n    ...localProps,\n  };\n  return (\n    <AriaCheckbox\n      className={composeRenderProps(className, (className) =>\n        root({ variant, appearance, className })\n      )}\n      {...props}\n    >\n      {composeRenderProps(props.children, (children, { isIndeterminate }) => (\n        <VariantsProvider\n          variant={variant}\n          appearance={appearance}\n          isIndeterminate={isIndeterminate}\n        >\n          {children}\n        </VariantsProvider>\n      ))}\n    </AriaCheckbox>\n  );\n};\n\ninterface CheckboxIndicatorProps extends React.ComponentProps<\"div\"> {}\n\nconst CheckboxIndicator = ({ className, ...props }: CheckboxIndicatorProps) => {\n  const { variant, appearance, isIndeterminate } =\n    useVariantsContext(\"CheckboxIndicator\");\n  return (\n    <div className={indicator({ variant, appearance, className })} {...props}>\n      {isIndeterminate ? (\n        <MinusIcon className=\"size-2.5\" />\n      ) : (\n        <CheckIcon className=\"size-3\" />\n      )}\n    </div>\n  );\n};\n\nexport type { CheckboxProps, CheckboxRootProps, CheckboxIndicatorProps };\nexport { Checkbox, CheckboxRoot, CheckboxIndicator };\n\nexport { CheckboxProvider };\nexport { checkboxStyles };\n",
      "type": "registry:ui"
    }
  ]
}