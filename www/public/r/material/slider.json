{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:ui",
  "dependencies": [
    "@react-aria/utils"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/material/field.json",
    "http://localhost:3000/r/material/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/material/ui/slider.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useSlotId } from \"@react-aria/utils\";\nimport {\n  composeRenderProps,\n  Slider as AriaSlider,\n  SliderOutput as AriaSliderOutput,\n  SliderThumb as AriaSliderThumb,\n  SliderTrack as AriaSliderTrack,\n  TextContext,\n  SliderStateContext,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusRing } from \"@/registry/material/lib/focus-styles\";\nimport { createScopedContext } from \"@/registry/material/lib/utils\";\nimport { Description, Label } from \"@/registry/material/ui/field\";\n\nconst sliderStyles = tv({\n  slots: {\n    root: \"group flex flex-col gap-2\",\n    track:\n      \"bg-bg-neutral disabled:bg-bg-disabled relative grow cursor-pointer rounded-full disabled:cursor-default\",\n    filler:\n      \"group-disabled:bg-bg-disabled pointer-events-none absolute rounded-full\",\n    thumb: [\n      focusRing(),\n      \"disabled:bg-bg-disabled disabled:border-bg left-[50%] top-[50%] rounded-full bg-white shadow-md transition-[width,height] disabled:border\",\n    ],\n    valueLabel: \"text-fg-muted text-sm\",\n  },\n  variants: {\n    variant: {\n      accent: {\n        filler: \"bg-bg-accent\",\n      },\n      primary: {\n        filler: \"bg-bg-primary\",\n      },\n    },\n    orientation: {\n      horizontal: {\n        root: \"w-48\",\n        track: \"h-2 w-full\",\n        filler: \"top-0 h-full\",\n      },\n      vertical: {\n        root: \"h-48 items-center\",\n        track: \"w-2 flex-1\",\n        filler: \"bottom-0 w-full\",\n      },\n    },\n    size: {\n      sm: {\n        thumb: \"dragging:size-4 size-3\",\n        track: \"orientation-vertical:w-1 orientation-horizontal:h-1\",\n      },\n      md: {\n        thumb: \"dragging:size-5 size-4\",\n        track: \"orientation-vertical:w-2 orientation-horizontal:h-2\",\n      },\n      lg: {\n        thumb: \"dragging:size-6 size-5\",\n        track: \"orientation-vertical:w-3 orientation-horizontal:h-3\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"accent\",\n    size: \"md\",\n  },\n});\n\nconst { root, track, filler, thumb, valueLabel } = sliderStyles();\n\nconst [SliderProvider, useSliderContext] =\n  createScopedContext<VariantProps<typeof sliderStyles>>(\"SliderRoot\");\n\ninterface SliderProps extends Omit<SliderRootProps, \"children\"> {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  showValueLabel?: boolean;\n  getValueLabel?: (value: number[]) => string;\n}\nconst Slider = ({\n  label,\n  description,\n  showValueLabel = true,\n  getValueLabel,\n  ...props\n}: SliderProps) => {\n  return (\n    <SliderRoot {...props}>\n      <div className=\"grid grid-cols-[1fr_auto] [grid-template-areas:'label_value']\">\n        {label && <Label className=\"[grid-area:label]\">{label}</Label>}\n        {showValueLabel && (\n          <SliderValueLabel className=\"[grid-area:value]\">\n            {({ state }) =>\n              getValueLabel ? getValueLabel(state.values) : null\n            }\n          </SliderValueLabel>\n        )}\n      </div>\n      <SliderTrack>\n        {({ state }) => (\n          <>\n            <SliderFiller />\n            {state.values.map((_, i) => (\n              <SliderThumb key={i} index={i} />\n            ))}\n          </>\n        )}\n      </SliderTrack>\n      {description && <Description>{description}</Description>}\n    </SliderRoot>\n  );\n};\n\ninterface SliderRootProps\n  extends React.ComponentProps<typeof AriaSlider>,\n    VariantProps<typeof sliderStyles> {}\nconst SliderRoot = ({\n  children,\n  className,\n  variant,\n  size,\n  ...props\n}: SliderRootProps) => {\n  const descriptionId = useSlotId();\n  return (\n    <AriaSlider\n      aria-describedby={descriptionId}\n      className={composeRenderProps(className, (className, { orientation }) =>\n        root({ orientation, size, className })\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, (children, { orientation }) => (\n        <>\n          <TextContext\n            value={{ slots: { description: { id: descriptionId } } }}\n          >\n            <SliderProvider\n              variant={variant}\n              orientation={orientation}\n              size={size}\n            >\n              {children}\n            </SliderProvider>\n          </TextContext>\n        </>\n      ))}\n    </AriaSlider>\n  );\n};\n\ninterface SliderTrackProps\n  extends React.ComponentProps<typeof AriaSliderTrack> {}\nconst SliderTrack = ({ ...props }: SliderTrackProps) => {\n  const { orientation, size } = useSliderContext(\"SliderTrack\");\n  return (\n    <AriaSliderTrack\n      className={composeRenderProps(props.className, (className) =>\n        track({ orientation, size, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface SliderFillerProps extends React.ComponentProps<\"div\"> {}\nconst SliderFiller = ({ className, style, ...props }: SliderFillerProps) => {\n  const { variant, size } = useSliderContext(\"SliderTrack\");\n  const SliderState = React.useContext(SliderStateContext);\n  if (!SliderState)\n    throw new Error(\"SliderFiller must be used within SliderRoot\");\n  const { orientation, getThumbPercent, values } = SliderState;\n  const dimensionStyles = getFillerDimensions(\n    values,\n    orientation,\n    getThumbPercent\n  );\n\n  return (\n    <div\n      className={filler({ variant, orientation, size, className })}\n      style={{ ...style, ...dimensionStyles }}\n      {...props}\n    />\n  );\n};\n\ninterface SliderThumbProps\n  extends React.ComponentProps<typeof AriaSliderThumb> {}\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n  const { orientation, size } = useSliderContext(\"SliderThumb\");\n  return (\n    <AriaSliderThumb\n      className={composeRenderProps(className, (className) =>\n        thumb({ orientation, size, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface SliderValueLabelProps\n  extends React.ComponentProps<typeof AriaSliderOutput> {}\nconst SliderValueLabel = ({\n  children,\n  className,\n  ...props\n}: SliderValueLabelProps) => {\n  return (\n    <AriaSliderOutput\n      className={composeRenderProps(className, (className) =>\n        valueLabel({ className })\n      )}\n      {...props}\n    >\n      {composeRenderProps(\n        children,\n        (children, { state }) =>\n          children ??\n          state.values.map((_, i) => state.getThumbValueLabel(i)).join(\" - \")\n      )}\n    </AriaSliderOutput>\n  );\n};\n\nconst getFillerDimensions = (\n  values: number[],\n  orientation: \"horizontal\" | \"vertical\",\n  getThumbPercent: (index: number) => number\n): React.CSSProperties => {\n  if (values.length === 1 && orientation === \"horizontal\")\n    return { width: `${getThumbPercent(0) * 100}%` };\n\n  if (values.length === 1 && orientation === \"vertical\")\n    return { height: `${getThumbPercent(0) * 100}%` };\n\n  if (orientation === \"horizontal\")\n    return {\n      left: `${getThumbPercent(0) * 100}%`,\n      width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`,\n    };\n\n  if (orientation === \"vertical\")\n    return {\n      bottom: `${getThumbPercent(0) * 100}%`,\n      height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`,\n    };\n\n  return {};\n};\n\nexport type { SliderProps };\n\nexport {\n  Slider,\n  SliderRoot,\n  SliderTrack,\n  SliderFiller,\n  SliderThumb,\n  SliderValueLabel,\n};\n",
      "type": "registry:ui"
    }
  ]
}