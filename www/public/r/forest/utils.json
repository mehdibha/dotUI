{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "utils",
  "type": "registry:lib",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/registry/forest/lib/utils.tsx",
      "content": "import * as React from \"react\";\r\nimport { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport function createScopedContext<ContextValueType extends object | null>(\r\n  rootComponentName: string,\r\n  defaultContext?: ContextValueType\r\n) {\r\n  const Context = React.createContext<ContextValueType | undefined>(\r\n    defaultContext\r\n  );\r\n\r\n  const Provider: React.FC<ContextValueType & { children: React.ReactNode }> = (\r\n    props\r\n  ) => {\r\n    const { children, ...context } = props;\r\n    // Only re-memoize when prop values change\r\n    const value = React.useMemo(\r\n      () => context,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      Object.values(context)\r\n    ) as ContextValueType;\r\n    return <Context.Provider value={value}>{children}</Context.Provider>;\r\n  };\r\n\r\n  Provider.displayName = rootComponentName + \"Provider\";\r\n\r\n  function useContext(consumerName: string) {\r\n    const context = React.useContext(Context);\r\n    if (context) return context;\r\n    if (defaultContext !== undefined) return defaultContext;\r\n    // if a defaultContext wasn't specified, it's a required context.\r\n    throw new Error(\r\n      `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\r\n    );\r\n  }\r\n\r\n  return [Provider, useContext] as const;\r\n}\r\n\r\nexport function createOptionalScopedContext<\r\n  ContextValueType extends object | null,\r\n>(rootComponentName: string, defaultContext?: ContextValueType) {\r\n  const Context = React.createContext<ContextValueType | undefined>(\r\n    defaultContext\r\n  );\r\n\r\n  const Provider: React.FC<ContextValueType & { children: React.ReactNode }> = (\r\n    props\r\n  ) => {\r\n    const { children, ...context } = props;\r\n    // Only re-memoize when prop values change\r\n    const value = React.useMemo(\r\n      () => context,\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      Object.values(context)\r\n    ) as ContextValueType;\r\n    return <Context.Provider value={value}>{children}</Context.Provider>;\r\n  };\r\n\r\n  Provider.displayName = rootComponentName + \"Provider\";\r\n\r\n  function useContext() {\r\n    const context = React.useContext(Context);\r\n    if (context) return context;\r\n    if (defaultContext !== undefined) return defaultContext;\r\n    // if a defaultContext wasn't specified, it's a required context.\r\n    return {};\r\n  }\r\n\r\n  return [Provider, useContext] as const;\r\n}\r\n",
      "type": "registry:lib",
      "target": "lib/utils.tsx"
    }
  ]
}