{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/registry/forest/ui/field.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  Label as AriaLabel,\n  Text as AriaText,\n  FieldError as AriaFieldError,\n  FieldErrorContext,\n  composeRenderProps,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\n\nconst labelStyles = tv({\n  base: \"peer-disabled:text-fg-disabled inline-flex items-center gap-px font-medium leading-none peer-disabled:cursor-not-allowed [&_svg]:size-3\",\n});\n\ninterface LabelProps extends React.ComponentProps<typeof AriaLabel> {}\nconst Label = ({ className, ...props }: LabelProps) => {\n  return (\n    <AriaLabel\n      data-slot=\"label\"\n      className={labelStyles({ className })}\n      {...props}\n    />\n  );\n};\n\nconst descriptionStyles = tv({\n  base: \"text-fg-muted text-xs\",\n});\n\ninterface DescriptionProps\n  extends Omit<React.ComponentProps<typeof AriaText>, \"slot\"> {}\nconst Description = ({ className, ...props }: DescriptionProps) => {\n  return (\n    <AriaText\n      slot=\"description\"\n      className={descriptionStyles({ className })}\n      {...props}\n    />\n  );\n};\n\nconst fieldErrorStyles = tv({\n  base: \"text-fg-danger text-xs\",\n});\n\ninterface FieldErrorProps extends React.ComponentProps<typeof AriaFieldError> {}\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n  return (\n    <AriaFieldError\n      className={composeRenderProps(className, (className) =>\n        fieldErrorStyles({ className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface HelpTextProps {\n  description?: DescriptionProps[\"children\"];\n  errorMessage?: FieldErrorProps[\"children\"];\n}\nconst HelpText = ({ description, errorMessage }: HelpTextProps) => {\n  const validation = React.use(FieldErrorContext);\n  const isError =\n    validation?.isInvalid &&\n    (!!errorMessage || validation.validationErrors.length > 0);\n\n  if (isError) return <FieldError>{errorMessage}</FieldError>;\n\n  if (description) return <Description>{description}</Description>;\n\n  return null;\n};\n\ninterface FieldProps extends HelpTextProps {\n  label?: LabelProps[\"children\"];\n}\n\nexport type {\n  LabelProps,\n  DescriptionProps,\n  FieldErrorProps,\n  HelpTextProps,\n  FieldProps,\n};\nexport { Label, Description, FieldError, HelpText };\n",
      "type": "registry:ui"
    }
  ]
}