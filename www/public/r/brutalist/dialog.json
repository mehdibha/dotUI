{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/brutalist/overlay.json"
  ],
  "files": [
    {
      "path": "src/registry/brutalist/ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  composeRenderProps,\n  DialogTrigger as AriaDialogTrigger,\n  Dialog as AriaDialog,\n  Heading as AriaHeading,\n  Text as AriaText,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport {\n  Overlay,\n  type OverlayProps,\n} from \"@/modules/registry/ui/overlay.basic\";\n\nconst dialogStyles = tv({\n  slots: {\n    content: [\n      \"outline-hidden relative flex h-[inherit] max-h-[inherit] flex-col rounded-[inherit] p-4\",\n    ],\n    header: \"mb-4\",\n    heading: \"text-lg font-medium\",\n    description: \"text-fg-muted text-sm\",\n    body: \"-mx-4 flex-1 space-y-2 overflow-y-auto px-4 py-2\",\n    inset: \"bg-bg-muted -mx-4 border px-4 py-4\",\n    footer: \"flex flex-col-reverse gap-2 pt-4 sm:flex-row sm:justify-end\",\n  },\n});\n\nconst { content, header, heading, description, body, footer, inset } =\n  dialogStyles();\n\ninterface DialogRootProps\n  extends React.ComponentProps<typeof AriaDialogTrigger> {}\nconst DialogRoot = (props: DialogRootProps) => {\n  return <AriaDialogTrigger {...props} />;\n};\n\ninterface DialogProps\n  extends DialogContentProps,\n    Omit<OverlayProps, \"children\"> {\n  title?: string;\n  description?: string;\n}\nconst Dialog = ({\n  title,\n  description,\n  type = \"modal\",\n  mobileType = \"drawer\",\n  modalProps,\n  popoverProps,\n  drawerProps,\n  isDismissable: isDismissableProp,\n  role,\n  isOpen,\n  defaultOpen,\n  onOpenChange,\n  isKeyboardDismissDisabled,\n  shouldCloseOnInteractOutside,\n  ...props\n}: DialogProps) => {\n  const isDismissable = isDismissableProp ?? role !== \"alertdialog\";\n  return (\n    <Overlay\n      type={type}\n      mobileType={mobileType}\n      isOpen={isOpen}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      isDismissable={isDismissable}\n      isKeyboardDismissDisabled={isKeyboardDismissDisabled}\n      shouldCloseOnInteractOutside={shouldCloseOnInteractOutside}\n      modalProps={modalProps}\n      popoverProps={popoverProps}\n      drawerProps={drawerProps}\n    >\n      <DialogContent role={role} {...props}>\n        {composeRenderProps(props.children, (children) => (\n          <>\n            {(title || description) && (\n              <DialogHeader>\n                {title && <DialogHeading>{title}</DialogHeading>}\n                {description && (\n                  <DialogDescription>{description}</DialogDescription>\n                )}\n              </DialogHeader>\n            )}\n            {children}\n          </>\n        ))}\n      </DialogContent>\n    </Overlay>\n  );\n};\n\ninterface DialogContentProps extends React.ComponentProps<typeof AriaDialog> {}\nconst DialogContent = ({ className, ...props }: DialogContentProps) => {\n  return <AriaDialog className={content({ className })} {...props} />;\n};\n\ninterface DialogHeaderProps extends React.ComponentProps<\"header\"> {}\nconst DialogHeader = ({ className, ...props }: DialogHeaderProps) => {\n  return <header className={header({ className })} {...props} />;\n};\n\ninterface DialogHeadingProps extends React.ComponentProps<typeof AriaHeading> {}\nconst DialogHeading = ({ className, ...props }: DialogHeadingProps) => {\n  return <AriaHeading className={heading({ className })} {...props} />;\n};\n\ninterface DialogDescriptionProps\n  extends Omit<React.ComponentProps<typeof AriaText>, \"slot\"> {}\nconst DialogDescription = ({ className, ...props }: DialogDescriptionProps) => {\n  return (\n    <AriaText\n      slot=\"description\"\n      className={description({ className })}\n      {...props}\n    />\n  );\n};\n\ninterface DialogBodyProps extends React.ComponentProps<\"div\"> {}\nconst DialogBody = ({ className, ...props }: DialogBodyProps) => {\n  return <div className={body({ className })} {...props} />;\n};\n\ntype DialogFooterProps = React.ComponentProps<\"footer\">;\nconst DialogFooter = ({ className, ...props }: DialogFooterProps) => {\n  return <footer className={footer({ className })} {...props} />;\n};\n\ntype DialogInsetProps = React.ComponentProps<\"div\">;\nconst DialogInset = ({ className, ...props }: DialogInsetProps) => {\n  return <div className={inset({ className })} {...props} />;\n};\n\nexport type {\n  DialogRootProps,\n  DialogProps,\n  DialogHeaderProps,\n  DialogHeadingProps,\n  DialogDescriptionProps,\n  DialogContentProps,\n  DialogFooterProps,\n  DialogInsetProps,\n};\nexport {\n  DialogRoot,\n  Dialog,\n  DialogHeader,\n  DialogHeading,\n  DialogDescription,\n  DialogContent,\n  DialogBody,\n  DialogFooter,\n  DialogInset,\n};\n",
      "type": "registry:ui"
    }
  ]
}