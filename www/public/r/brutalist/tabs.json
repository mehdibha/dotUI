{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/brutalist/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/brutalist/ui/tabs.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Tabs as AriaTabs,\n  TabList as AriaTabList,\n  Tab as AriaTab,\n  TabPanel as AriaTabPanel,\n  composeRenderProps,\n  type TabListProps as AriaTabListProps,\n} from \"react-aria-components\";\nimport { tv, VariantProps } from \"tailwind-variants\";\nimport { focusRing } from \"@/registry/brutalist/lib/focus-styles\";\nimport { createScopedContext } from \"@/registry/brutalist/lib/utils\";\n\nconst tabsStyles = tv({\n  slots: {\n    root: \"flex\",\n    list: \"flex\",\n    tab: [\n      focusRing(),\n      \"text-fg-muted hover:text-fg selected:[&:not([data-disabled])]:text-fg disabled:text-fg-disabled flex cursor-pointer items-center justify-center whitespace-nowrap text-sm transition-colors disabled:cursor-default\",\n    ],\n    panel: focusRing(),\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        root: \"flex-col\",\n        list: \"\",\n        panel: \"mt-2\",\n      },\n      vertical: {\n        root: \"flex-row\",\n        list: \"flex-col\",\n        panel: \"ml-2\",\n      },\n    },\n    variant: {\n      solid: {\n        list: \"bg-bg-muted gap-1 rounded-lg p-1\",\n        tab: \"selected:bg-bg-inverse/10 disabled:bg-bg-disabled selected:shadow-sm rounded-sm px-3 py-1.5 font-medium\",\n      },\n      underline: {\n        tab: \"selected:border-bg-accent border-transparent p-2.5\",\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      orientation: \"horizontal\",\n      variant: \"underline\",\n      className: {\n        list: \"border-b\",\n        tab: \"border-b-3 -mb-px\",\n      },\n    },\n    {\n      orientation: \"vertical\",\n      variant: \"underline\",\n      className: {\n        list: \"border-r\",\n        tab: \"border-r-3 -mr-px\",\n      },\n    },\n  ],\n});\n\nconst { root, list, tab, panel } = tabsStyles();\n\nconst [TabsProvider, useTabsContext] =\n  createScopedContext<VariantProps<typeof tabsStyles>>(\"Tabs\");\n\ninterface TabsProps\n  extends React.ComponentProps<typeof AriaTabs>,\n    VariantProps<typeof tabsStyles> {}\nconst Tabs = ({\n  variant = \"underline\",\n  className,\n  children,\n  ...props\n}: TabsProps) => (\n  <AriaTabs\n    className={composeRenderProps(className, (className, { orientation }) =>\n      root({ orientation, className })\n    )}\n    {...props}\n  >\n    {composeRenderProps(children, (children, { orientation }) => (\n      <TabsProvider orientation={orientation} variant={variant}>\n        {children}\n      </TabsProvider>\n    ))}\n  </AriaTabs>\n);\n\ninterface TabListProps<T extends object> extends AriaTabListProps<T> {}\nconst TabList = <T extends object>({\n  className,\n  ...props\n}: TabListProps<T>) => {\n  const { orientation, variant } = useTabsContext(\"TabList\");\n  return (\n    <AriaTabList\n      className={composeRenderProps(className, (className) =>\n        list({ variant, orientation, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface TabProps extends React.ComponentProps<typeof AriaTab> {}\nconst Tab = ({ className, ...props }: TabProps) => {\n  const { orientation, variant } = useTabsContext(\"Tab\");\n  return (\n    <AriaTab\n      className={composeRenderProps(className, (className) =>\n        tab({ orientation, variant, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface TabPanelProps extends React.ComponentProps<typeof AriaTabPanel> {}\nconst TabPanel = ({ className, ...props }: TabPanelProps) => {\n  const { orientation, variant } = useTabsContext(\"TabList\");\n  return (\n    <AriaTabPanel\n      className={composeRenderProps(className, (className) =>\n        panel({ orientation, variant, className })\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type { TabsProps, TabListProps, TabProps, TabPanelProps };\nexport { Tabs, TabList, Tab, TabPanel };\n",
      "type": "registry:ui",
      "target": "ui/tabs.tsx"
    }
  ]
}