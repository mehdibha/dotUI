{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/registry/brutalist/ui/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { createScopedContext } from \"@/modules/registry/lib/utils\";\n\nconst avatarStyles = tv({\n  slots: {\n    root: \"bg-bg relative inline-flex shrink-0 overflow-hidden align-middle\",\n    image: \"aspect-square size-full\",\n    fallback:\n      \"bg-bg-muted flex size-full select-none items-center justify-center\",\n    placeholder:\n      \"bg-bg-muted flex size-full h-full animate-pulse items-center justify-center\",\n  },\n  variants: {\n    size: {\n      sm: { root: \"size-8\" },\n      md: { root: \"size-10\" },\n      lg: { root: \"size-12\" },\n    },\n    shape: {\n      circle: { root: \"rounded-full\" },\n      square: { root: \"rounded-sm\" },\n    },\n  },\n  defaultVariants: {\n    shape: \"circle\",\n    size: \"md\",\n  },\n});\n\nconst { root, image, fallback, placeholder } = avatarStyles();\n\nconst [AvatarProvider, useAvatarContext] = createScopedContext<\n  VariantProps<typeof avatarStyles> & {\n    status: Status;\n    setStatus: (status: Status) => void;\n  }\n>(\"AlertRoot\");\n\ninterface AvatarProps\n  extends AvatarImageProps,\n    VariantProps<typeof avatarStyles> {\n  fallback?: React.ReactNode;\n}\nconst Avatar = ({\n  className,\n  style,\n  fallback,\n  size,\n  shape,\n  ...props\n}: AvatarProps) => {\n  return (\n    <AvatarRoot className={className} style={style} size={size} shape={shape}>\n      <AvatarImage {...props} />\n      <AvatarFallback>{fallback}</AvatarFallback>\n      <AvatarPlaceholder />\n    </AvatarRoot>\n  );\n};\n\ninterface AvatarRootProps\n  extends React.ComponentProps<\"span\">,\n    VariantProps<typeof avatarStyles> {}\nfunction AvatarRoot({ className, shape, size, ...props }: AvatarRootProps) {\n  const [status, setStatus] = React.useState<Status>(\"idle\");\n\n  return (\n    <AvatarProvider\n      shape={shape}\n      size={size}\n      status={status}\n      setStatus={setStatus}\n    >\n      <span className={root({ className, shape, size })} {...props} />\n    </AvatarProvider>\n  );\n}\n\ninterface AvatarImageProps extends React.ComponentProps<\"img\"> {}\nfunction AvatarImage({ src, alt, className, ...props }: AvatarImageProps) {\n  const status = useImageLoadingStatus(src);\n  const { setStatus } = useAvatarContext(\"AvatarImage\");\n\n  React.useLayoutEffect(() => {\n    if (status !== \"idle\") {\n      setStatus(status);\n    }\n  }, [status, setStatus]);\n\n  if (status === \"success\")\n    return (\n      <img className={image({ className })} src={src} alt={alt} {...props} />\n    );\n\n  return null;\n}\n\ntype AvatarFallbackProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst AvatarFallback = ({ className, ...props }: AvatarFallbackProps) => {\n  const { status } = useAvatarContext(\"AvatarFallback\");\n\n  if (status === \"error\")\n    return <span className={fallback({ className })} {...props} />;\n\n  return null;\n};\n\ninterface AvatarPlaceholderProps extends React.ComponentProps<\"span\"> {}\n\nconst AvatarPlaceholder = ({ className, ...props }: AvatarPlaceholderProps) => {\n  const { status } = useAvatarContext(\"AvatarPlaceholder\");\n\n  if ([\"idle\", \"loading\"].includes(status))\n    return <span className={placeholder({ className })} {...props} />;\n\n  return null;\n};\n\ntype Status = \"idle\" | \"loading\" | \"success\" | \"error\";\nfunction useImageLoadingStatus(src?: string) {\n  const [status, setStatus] = React.useState<Status>(\"idle\");\n\n  React.useLayoutEffect(() => {\n    if (!src) {\n      setStatus(\"error\");\n      return;\n    }\n    let isMounted = true;\n    const image = new window.Image();\n    const updateStatus = (status: Status) => () => {\n      if (!isMounted) return;\n      setStatus(status);\n    };\n    setStatus(\"loading\");\n    image.onload = updateStatus(\"success\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n    return () => {\n      isMounted = false;\n    };\n  }, [src]);\n\n  return status;\n}\n\nexport type {\n  AvatarProps,\n  AvatarRootProps,\n  AvatarImageProps,\n  AvatarFallbackProps,\n  AvatarPlaceholderProps,\n};\nexport { Avatar, AvatarRoot, AvatarImage, AvatarFallback, AvatarPlaceholder };\n",
      "type": "registry:ui"
    }
  ]
}