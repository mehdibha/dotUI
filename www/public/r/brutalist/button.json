{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/brutalist/loader.json",
    "http://localhost:3000/r/brutalist/focus-styles.json"
  ],
  "files": [
    {
      "path": "src/registry/brutalist/ui/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  composeRenderProps,\n  Button as AriaButton,\n  Link as AriaLink,\n  type ButtonProps as AriaButtonProps,\n  type LinkProps as AriaLinkProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Loader } from \"@/registry/brutalist/ui/loader\";\nimport { focusRing } from \"@/registry/brutalist/lib/focus-styles\";\nimport { createOptionalScopedContext } from \"@/registry/brutalist/lib/utils\";\n\nconst buttonStyles = tv({\n  extend: focusRing,\n  base: \"disabled:bg-bg-disabled disabled:text-fg-disabled pending:cursor-default pending:bg-bg-disabled pending:text-fg-disabled pending:border pending:border-border-disabled pending:**:not-data-[slot=spinner]:not-in-data-[slot=spinner]:opacity-0 relative inline-flex shrink-0 cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium leading-normal transition-all disabled:cursor-default\",\n  variants: {\n    variant: {\n      default:\n        \"bg-bg-neutral hover:bg-bg-neutral-hover pressed:bg-bg-neutral-active text-fg-onNeutral\",\n      primary:\n        \"bg-bg-primary hover:bg-bg-primary-hover pressed:bg-bg-primary-active text-fg-onPrimary\",\n      quiet:\n        \"hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 text-fg bg-transparent\",\n      outline:\n        \"border-border-field hover:bg-bg-inverse/10 pressed:bg-bg-inverse/15 text-fg disabled:border-border-disabled border disabled:bg-transparent\",\n      accent:\n        \"bg-bg-accent hover:bg-bg-accent-hover pressed:bg-bg-accent-active text-fg-onAccent\",\n      success:\n        \"bg-bg-success hover:bg-bg-success-hover pressed:bg-bg-success-active text-fg-onSuccess\",\n      warning:\n        \"bg-bg-warning hover:bg-bg-warning-hover pressed:bg-bg-warning-active text-fg-onWarning\",\n      danger:\n        \"bg-bg-danger hover:bg-bg-danger-hover pressed:bg-bg-danger-active text-fg-onDanger\",\n    },\n    size: {\n      sm: \"size-8 [&_svg]:size-4\",\n      md: \"size-9 [&_svg]:size-4\",\n      lg: \"size-10 [&_svg]:size-5\",\n    },\n    shape: {\n      rectangle: \"\",\n      square: \"\",\n      circle: \"rounded-full\",\n    },\n  },\n  compoundVariants: [\n    {\n      size: \"sm\",\n      shape: \"rectangle\",\n      className: \"w-auto px-3\",\n    },\n    {\n      size: \"md\",\n      shape: \"rectangle\",\n      className: \"w-auto px-4\",\n    },\n    {\n      size: \"lg\",\n      shape: \"rectangle\",\n      className: \"w-auto px-5\",\n    },\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n    shape: \"rectangle\",\n  },\n});\n\nconst [ButtonProvider, useButtonContext] =\n  createOptionalScopedContext<VariantProps<typeof buttonStyles>>(\"Button\");\n\ninterface ButtonProps\n  extends Omit<AriaButtonProps, \"className\">,\n    Omit<AriaLinkProps, \"className\" | \"children\" | \"style\">,\n    VariantProps<typeof buttonStyles> {\n  className?: string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\n\nconst Button = React.forwardRef(\n  (localProps: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n    const contextProps = useButtonContext();\n    const props = { ...contextProps, ...localProps };\n\n    const { className, variant, size, shape, prefix, suffix, ...restProps } =\n      props;\n\n    const Element: React.ElementType = props.href ? AriaLink : AriaButton;\n\n    return (\n      <Element\n        ref={ref}\n        {...restProps}\n        className={buttonStyles({ variant, size, shape, className })}\n      >\n        {composeRenderProps(props.children, (children, { isPending }) => (\n          <>\n            {isPending && (\n              <Loader\n                data-slot=\"spinner\"\n                aria-label=\"loading\"\n                className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\"\n                size={16}\n              />\n            )}\n            {prefix}\n            {typeof children === \"string\" ? (\n              <span className=\"truncate\">{children}</span>\n            ) : (\n              children\n            )}\n            {suffix}\n          </>\n        ))}\n      </Element>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport type { ButtonProps };\nexport { Button, buttonStyles, ButtonProvider };\n",
      "type": "registry:ui"
    }
  ]
}