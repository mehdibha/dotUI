{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:ui",
  "registryDependencies": [
    "http://localhost:3000/r/brutalist/field.json",
    "http://localhost:3000/r/brutalist/button.json",
    "http://localhost:3000/r/brutalist/input.json",
    "http://localhost:3000/r/brutalist/list-box.json",
    "http://localhost:3000/r/brutalist/overlay.json"
  ],
  "files": [
    {
      "path": "src/registry/brutalist/ui/combobox.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronDownIcon } from \"lucide-react\";\nimport {\n  ComboBox as AriaCombobox,\n  type ComboBoxProps as AriaComboboxProps,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { Button } from \"@/registry/brutalist/ui/button\";\nimport { Label, HelpText, type FieldProps } from \"@/registry/brutalist/ui/field\";\nimport { Input, InputRoot } from \"@/registry/brutalist/ui/input\";\nimport {\n  ListBox,\n  ListBoxItem,\n  ListBoxItemProps,\n} from \"@/registry/brutalist/ui/list-box\";\nimport { Overlay } from \"@/registry/brutalist/ui/overlay\";\n\nconst comboboxStyles = tv({\n  slots: {\n    root: \"flex w-48 flex-col items-start gap-2\",\n  },\n});\n\ninterface ComboboxProps<T extends object>\n  extends Omit<ComboboxRootProps<T>, \"children\">,\n    Omit<FieldProps, \"children\"> {\n  isLoading?: boolean;\n  children: React.ReactNode | ((item: T) => React.ReactNode);\n  items?: Iterable<T>;\n}\nconst Combobox = <T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  items,\n  isLoading,\n  ...props\n}: ComboboxProps<T>) => {\n  return (\n    <ComboboxRoot {...props}>\n      {label && <Label>{label}</Label>}\n      <ComboboxInput />\n      <HelpText description={description} errorMessage={errorMessage} />\n      <Overlay type=\"popover\">\n        <ListBox items={items} isLoading={isLoading}>\n          {children}\n        </ListBox>\n      </Overlay>\n    </ComboboxRoot>\n  );\n};\n\nconst ComboboxInput = () => {\n  return (\n    <InputRoot className=\"px-0\">\n      <Input className=\"pl-2\" />\n      <Button variant=\"default\" shape=\"square\" className=\"my-1 mr-1 size-7\">\n        <ChevronDownIcon />\n      </Button>\n    </InputRoot>\n  );\n};\n\ninterface ComboboxRootProps<T extends object>\n  extends Omit<AriaComboboxProps<T>, \"className\"> {\n  className?: string;\n}\nconst ComboboxRoot = <T extends object>({\n  className,\n  ...props\n}: ComboboxRootProps<T>) => {\n  const { root } = comboboxStyles();\n  return <AriaCombobox className={root({ className })} {...props} />;\n};\n\ninterface ComboboxItemProps<T> extends ListBoxItemProps<T> {}\nconst ComboboxItem = ListBoxItem;\n\nexport type { ComboboxProps, ComboboxRootProps, ComboboxItemProps };\nexport { Combobox, ComboboxRoot, ComboboxInput, ComboboxItem };\n",
      "type": "registry:ui",
      "target": "ui/combobox.tsx"
    }
  ]
}