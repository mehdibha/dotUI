{
  "name": "alert_notch-2",
  "description": "Alert with a bold left border for emphasis and muted background.",
  "files": [
    {
      "type": "registry:core",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  AlertCircleIcon,\n  AlertTriangleIcon,\n  CheckCircle2Icon,\n  InfoIcon,\n} from \"lucide-react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { createScopedContext } from \"@/lib/utils\";\n\nconst alertStyles = tv({\n  slots: {\n    root: \"bg-bg-muted text-fg flex items-center gap-4 rounded-lg border-l-8 p-4 [&_svg]:size-4\",\n    title: \"mr-1 font-medium leading-normal tracking-tight\",\n    content: \"text-sm\",\n  },\n  variants: {\n    variant: {\n      neutral: { root: \"border-bg-primary\" },\n      success: {\n        root: \"border-bg-success\",\n      },\n      warning: {\n        root: \"border-bg-warning\",\n      },\n      danger: {\n        root: \"border-bg-danger\",\n      },\n      info: {\n        root: \"border-bg-info\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"neutral\",\n  },\n});\n\nconst { root, title, content } = alertStyles();\n\nconst [AlertProvider, useAlertContext] =\n  createScopedContext<VariantProps<typeof alertStyles>>(\"AlertRoot\");\n\nconst defaultIcons = {\n  neutral: null,\n  danger: <AlertCircleIcon />,\n  success: <CheckCircle2Icon />,\n  warning: <AlertTriangleIcon />,\n  info: <InfoIcon />,\n};\n\ninterface AlertProps extends AlertRootProps {\n  title?: string;\n  description?: string;\n  action?: React.ReactNode;\n  icon?: React.ReactNode | null;\n}\n\nfunction Alert({\n  variant = \"neutral\",\n  title,\n  description,\n  action,\n  icon,\n  ...props\n}: AlertProps) {\n  const resolvedIcon = icon === undefined ? defaultIcons[variant] : icon;\n  return (\n    <AlertRoot variant={variant} {...props}>\n      {resolvedIcon}\n      <div className=\"flex-1 space-y-0.5\">\n        <AlertTitle>{title}</AlertTitle>\n        {description && <AlertContent>{description}</AlertContent>}\n      </div>\n      {action}\n    </AlertRoot>\n  );\n}\n\ninterface AlertRootProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof alertStyles> {}\n\nfunction AlertRoot({ className, variant, ...props }: AlertRootProps) {\n  return (\n    <AlertProvider variant={variant}>\n      <div role=\"alert\" className={root({ variant, className })} {...props} />\n    </AlertProvider>\n  );\n}\n\ninterface AlertTitleProps extends React.ComponentProps<\"h5\"> {}\n\nfunction AlertTitle({ className, ...props }: AlertTitleProps) {\n  const { variant } = useAlertContext(\"AlertTitle\");\n  return <h5 className={title({ variant, className })} {...props} />;\n}\n\ninterface AlertContentProps extends React.ComponentProps<\"p\"> {}\n\nfunction AlertContent({ className, ...props }: AlertContentProps) {\n  const { variant } = useAlertContext(\"AlertTitle\");\n  return <p className={content({ variant, className })} {...props} />;\n}\n\nexport type { AlertProps, AlertRootProps, AlertTitleProps, AlertContentProps };\nexport { Alert, AlertRoot, AlertTitle, AlertContent };\n",
      "target": "core/alert.tsx"
    }
  ]
}