{
  "name": "list-box",
  "type": "registry:core",
  "files": [
    {
      "path": "core/list-box_basic.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { CheckIcon, Loader2Icon } from \"lucide-react\";\nimport {\n  composeRenderProps,\n  ListBox as AriaListBox,\n  ListBoxItem as AriaListBoxItem,\n  Collection as AriaCollection,\n  type ListBoxProps as AriaListBoxProps,\n  type ListBoxItemProps as AriaListBoxItemProps,\n  ListStateContext,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Text } from \"@/registry/core/text_basic\";\nimport { focusRing } from \"@/registry/lib/focus-styles\";\n\nconst listBoxStyles = tv({\n  base: [\n    focusRing(),\n    \"orientation-horizontal:flex-row orientation-horizontal:w-auto layout-grid:grid layout-grid:grid-cols-2 layout-grid:w-auto empty:text-fg-muted outline-hidden flex flex-col overflow-auto p-1 empty:min-h-24 empty:items-center empty:justify-center empty:text-sm empty:italic\",\n    \"[&_.separator]:-mx-1 [&_.separator]:my-1 [&_.separator]:w-auto\",\n  ],\n  variants: {\n    standalone: {\n      true: \"bg-bg max-h-60 w-48 overflow-y-auto rounded-md border\",\n      false: \"max-h-[inherit] rounded-[inherit]\",\n    },\n  },\n});\n\nconst listBoxItemStyles = tv({\n  base: [\n    \"disabled:pointer-default hover:bg-bg-inverse/10 focus:bg-bg-inverse/10 pressed:bg-bg-inverse/15 disabled:text-fg-disabled outline-hidden flex cursor-pointer items-center rounded-sm px-3 py-1.5 text-sm transition-colors disabled:cursor-default\",\n    \"selection-single:pl-0 selection-multiple:pl-0\",\n    \"[&_svg]:size-4\",\n  ],\n  variants: {\n    variant: {\n      default: \"text-fg\",\n      success: \"text-fg-success\",\n      warning: \"text-fg-warning\",\n      accent: \"text-fg-accent\",\n      danger: \"text-fg-danger\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ninterface ListBoxProps<T> extends AriaListBoxProps<T> {\n  isLoading?: boolean;\n}\nconst ListBox = <T extends object>({\n  children,\n  isLoading,\n  ...props\n}: ListBoxProps<T>) => {\n  const state = React.useContext(ListStateContext);\n  const standalone = !state;\n  return (\n    <AriaListBox\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        listBoxStyles({ standalone, className })\n      )}\n    >\n      <AriaCollection items={props.items}>{children}</AriaCollection>\n      {isLoading && (\n        <AriaListBoxItem className=\"flex items-center justify-center py-1.5\">\n          <Loader2Icon\n            aria-label=\"Loading more...\"\n            className=\"text-fg-muted size-5 animate-spin\"\n          />\n        </AriaListBoxItem>\n      )}\n    </AriaListBox>\n  );\n};\n\ninterface ItemProps<T>\n  extends AriaListBoxItemProps<T>,\n    VariantProps<typeof listBoxItemStyles> {\n  label?: string;\n  description?: string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\nconst Item = <T extends object>({\n  variant,\n  label,\n  description,\n  prefix,\n  suffix,\n  ...props\n}: ItemProps<T>) => {\n  const textValue =\n    props.textValue ||\n    (typeof props.children === \"string\" ? props.children : undefined);\n  return (\n    <AriaListBoxItem\n      {...props}\n      textValue={textValue}\n      className={composeRenderProps(props.className, (className) =>\n        listBoxItemStyles({ variant, className })\n      )}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { isSelected, selectionMode }) => (\n          <>\n            {selectionMode !== \"none\" && (\n              <span className=\"flex w-8 shrink-0 items-center justify-center\">\n                {isSelected && (\n                  <CheckIcon aria-hidden className=\"text-fg-accent size-4\" />\n                )}\n              </span>\n            )}\n            <span className=\"flex items-center gap-3\">\n              {prefix}\n              <span className=\"flex flex-1 flex-col\">\n                {label && <Text slot=\"label\">{label}</Text>}\n                {description && <Text slot=\"description\">{description}</Text>}\n                {children}\n              </span>\n              {suffix}\n            </span>\n          </>\n        )\n      )}\n    </AriaListBoxItem>\n  );\n};\n\nexport type { ListBoxProps, ItemProps };\nexport { ListBox, Item };\n",
      "type": "registry:core",
      "target": "core/list-box.tsx"
    }
  ]
}