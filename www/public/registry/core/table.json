{
  "name": "table",
  "type": "registry:core",
  "files": [
    {
      "path": "core/table_basic.tsx",
      "content": "\"use client\";\r\n\r\nimport { ChevronDownIcon, ChevronUpIcon, GripVerticalIcon } from \"lucide-react\";\r\nimport {\r\n  ResizableTableContainer as AriaResizableTableContainer,\r\n  Table as AriaTable,\r\n  TableHeader as AriaTableHeader,\r\n  TableBody as AriaTableBody,\r\n  Column as AriaColumn,\r\n  Collection as AriaCollection,\r\n  ColumnResizer as AriaColumnResizer,\r\n  Row as AriaRow,\r\n  Cell as AriaCell,\r\n  Button as AriaButton,\r\n  useTableOptions,\r\n  composeRenderProps,\r\n  type RowProps as AriaRowProps,\r\n  type TableBodyProps as AriaTableBodyProps,\r\n  type TableHeaderProps as AriaTableHeaderProps,\r\n} from \"react-aria-components\";\r\nimport { tv, VariantProps } from \"tailwind-variants\";\r\nimport { Checkbox } from \"@/registry/core/checkbox_basic\";\r\nimport { cn } from \"@/registry/lib/cn\";\r\nimport { createScopedContext } from \"@/registry/lib/context-helpers\";\r\nimport { focusRing } from \"@/registry/lib/focus-styles\";\r\n\r\nconst tableStyles = tv({\r\n  slots: {\r\n    resizableContainer: \"w-[500px] overflow-auto\",\r\n    root: [\r\n      \"relative min-h-24 w-full border-separate border-spacing-0 cursor-default text-sm\",\r\n      \"[&_.react-aria-DropIndicator]:outline-bg-accent [&_.react-aria-DropIndicator]:translate-z-0 [&_.react-aria-DropIndicator]:outline\",\r\n    ],\r\n    header: \"sticky top-0 z-10\",\r\n    column: [\r\n      focusRing(),\r\n      \"allows-sorting:cursor-pointer text-fg-muted relative whitespace-nowrap px-3 py-2 text-left font-medium\",\r\n    ],\r\n    resizer: [\r\n      focusRing(),\r\n      \"resizing:before:bg-bg-accent before:bg-border-field resizing:before:w-0.5 absolute right-0 box-content h-5 w-px cursor-col-resize px-2 before:block before:h-5 before:w-px before:transition-colors before:content-['']\",\r\n    ],\r\n    body: \"empty:text-center empty:italic\",\r\n    row: [\r\n      focusRing(),\r\n      \"data-href:cursor-pointer data-href:hover:bg-bg-muted data-action:cursor-pointer data-action:hover:bg-bg-muted disabled:text-fg-disabled data-[selection-mode=single]:hover:not-selected:bg-bg-muted data-[selection-mode=multiple]:hover:not-selected:bg-bg-muted selected:text-fg dragging:bg-bg relative transition-colors data-[selection-mode=multiple]:cursor-pointer data-[selection-mode=single]:cursor-pointer\",\r\n    ],\r\n    cell: [focusRing(), \"truncate px-3 py-2\"],\r\n  },\r\n  variants: {\r\n    variant: {\r\n      bordered: {\r\n        root: \"rounded-md border\",\r\n        column: \"border-b\",\r\n        row: \"group/row\",\r\n        cell: \"border-b group-last/row:border-b-0\",\r\n      },\r\n      solid: {\r\n        root: \"bg-bg-inverse/5 rounded-lg p-2\",\r\n        header: \"text-fg-muted border-y\",\r\n        body: \"text-fg\",\r\n        column: \"bg-bg-inverse/5 first:rounded-l-sm last:rounded-r-sm\",\r\n      },\r\n      line: {\r\n        column: \"border-b\",\r\n        row: \"group/row\",\r\n        cell: \"border-b group-last/row:border-b-0\",\r\n      },\r\n      quiet: {},\r\n    },\r\n    selectionVariant: {\r\n      primary: {\r\n        row: \"selected:bg-bg-primary-muted\",\r\n      },\r\n      accent: {\r\n        row: \"selected:bg-bg-accent-muted\",\r\n      },\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"line\",\r\n    selectionVariant: \"accent\",\r\n  },\r\n});\r\n\r\nconst { resizableContainer, root, header, column, resizer, body, row, cell } =\r\n  tableStyles();\r\n\r\nconst [TableProvider, useTableContext] = createScopedContext<\r\n  VariantProps<typeof tableStyles> & {\r\n    globalAction?: boolean;\r\n  }\r\n>(\"TableRoot\");\r\n\r\ninterface TableRootProps\r\n  extends React.ComponentProps<typeof AriaTable>,\r\n    VariantProps<typeof tableStyles> {}\r\nconst TableRoot = ({\r\n  variant,\r\n  selectionVariant,\r\n  onRowAction,\r\n  ...props\r\n}: TableRootProps) => {\r\n  return (\r\n    <TableProvider\r\n      variant={variant}\r\n      selectionVariant={selectionVariant}\r\n      globalAction={!!onRowAction}\r\n    >\r\n      <AriaTable\r\n        className={root({ variant })}\r\n        onRowAction={onRowAction}\r\n        {...props}\r\n      />\r\n    </TableProvider>\r\n  );\r\n};\r\n\r\ninterface TableHeaderProps<T extends object> extends AriaTableHeaderProps<T> {}\r\nconst TableHeader = <T extends object>({\r\n  columns,\r\n  children,\r\n  ...props\r\n}: TableHeaderProps<T>) => {\r\n  const { variant, selectionVariant } = useTableContext(\"TableHeader\");\r\n  const { selectionBehavior, selectionMode, allowsDragging } =\r\n    useTableOptions();\r\n  return (\r\n    <AriaTableHeader className={header({ variant })} {...props}>\r\n      {allowsDragging && <TableColumn />}\r\n      {selectionBehavior === \"toggle\" && (\r\n        <TableColumn>\r\n          {selectionMode === \"multiple\" && (\r\n            <Checkbox slot=\"selection\" variant={selectionVariant} />\r\n          )}\r\n        </TableColumn>\r\n      )}\r\n      <AriaCollection items={columns}>{children}</AriaCollection>\r\n    </AriaTableHeader>\r\n  );\r\n};\r\n\r\ninterface TableColumnProps extends React.ComponentProps<typeof AriaColumn> {\r\n  allowsResizing?: boolean;\r\n}\r\nfunction TableColumn({\r\n  allowsResizing,\r\n  children,\r\n  className,\r\n  ...props\r\n}: TableColumnProps) {\r\n  const { variant } = useTableContext(\"TableColumn\");\r\n  return (\r\n    <AriaColumn\r\n      className={composeRenderProps(className, (className) =>\r\n        column({ variant, className })\r\n      )}\r\n      {...props}\r\n    >\r\n      {composeRenderProps(\r\n        children,\r\n        (children, { allowsSorting, sortDirection }) => (\r\n          <div className=\"flex items-center gap-2\">\r\n            <span className=\"flex-1 truncate\">{children}</span>\r\n            {allowsSorting &&\r\n              (sortDirection === \"ascending\" ? (\r\n                <ChevronUpIcon aria-hidden className=\"text-fg-muted size-3\" />\r\n              ) : (\r\n                <ChevronDownIcon aria-hidden className=\"text-fg-muted size-3\" />\r\n              ))}\r\n            {allowsResizing && !props.width && (\r\n              <AriaColumnResizer className={resizer()} />\r\n            )}\r\n          </div>\r\n        )\r\n      )}\r\n    </AriaColumn>\r\n  );\r\n}\r\ninterface TableBodyProps<T extends object> extends AriaTableBodyProps<T> {\r\n  ref?: React.RefObject<HTMLTableSectionElement>;\r\n}\r\nconst TableBody = <T extends object>({\r\n  renderEmptyState = () => \"No results found.\",\r\n  className,\r\n  ...props\r\n}: TableBodyProps<T>) => {\r\n  const { variant } = useTableContext(\"TableBody\");\r\n  return (\r\n    <AriaTableBody\r\n      renderEmptyState={renderEmptyState}\r\n      className={composeRenderProps(className, (className) =>\r\n        body({ variant, className })\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\ninterface TableRowProps<T extends object> extends AriaRowProps<T> {}\r\nfunction TableRow<T extends object>({\r\n  columns,\r\n  children,\r\n  onAction,\r\n  ...props\r\n}: TableRowProps<T>) {\r\n  const { selectionBehavior, allowsDragging } = useTableOptions();\r\n  const { variant, selectionVariant, globalAction } =\r\n    useTableContext(\"TableRow\");\r\n\r\n  return (\r\n    <AriaRow\r\n      data-action={globalAction || !!onAction || undefined}\r\n      className={row({ variant, selectionVariant })}\r\n      onAction={onAction}\r\n      {...props}\r\n    >\r\n      {allowsDragging && (\r\n        <TableCell className=\"cursor-grab\">\r\n          <AriaButton\r\n            slot=\"drag\"\r\n            className={cn(\r\n              focusRing(),\r\n              \"rounded-xs text-fg-muted inline-flex items-center justify-center [&_svg]:size-4\"\r\n            )}\r\n          >\r\n            <GripVerticalIcon />\r\n          </AriaButton>\r\n        </TableCell>\r\n      )}\r\n      {selectionBehavior === \"toggle\" && (\r\n        <TableCell>\r\n          <Checkbox slot=\"selection\" variant={selectionVariant} />\r\n        </TableCell>\r\n      )}\r\n      <AriaCollection items={columns}>{children}</AriaCollection>\r\n    </AriaRow>\r\n  );\r\n}\r\n\r\ninterface TableCellProps extends React.ComponentProps<typeof AriaCell> {}\r\nconst TableCell = ({ className, ...props }: TableCellProps) => {\r\n  const { variant } = useTableContext(\"TableCell\");\r\n  return (\r\n    <AriaCell\r\n      className={composeRenderProps(className, (className) =>\r\n        cell({ variant, className })\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\ninterface TableResizableContainerProps\r\n  extends React.ComponentProps<typeof AriaResizableTableContainer> {}\r\nconst TableResizableContainer = ({\r\n  className,\r\n  ...props\r\n}: TableResizableContainerProps) => {\r\n  return (\r\n    <AriaResizableTableContainer\r\n      className={resizableContainer({ className })}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport type {\r\n  TableResizableContainerProps,\r\n  TableRootProps,\r\n  TableHeaderProps,\r\n  TableBodyProps,\r\n  TableColumnProps,\r\n  TableRowProps,\r\n  TableCellProps,\r\n};\r\nexport {\r\n  TableResizableContainer,\r\n  TableRoot,\r\n  TableHeader,\r\n  TableBody,\r\n  TableColumn,\r\n  TableRow,\r\n  TableCell,\r\n};\r\n",
      "type": "registry:core",
      "target": "core/table.tsx"
    }
  ]
}