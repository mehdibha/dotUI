{
  "name": "switch",
  "files": [
    {
      "type": "core",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Switch as AriaSwitch,\n  composeRenderProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusRing, focusRingGroup } from \"@/registry/lib/focus-styles\";\nimport { createScopedContext } from \"@/registry/lib/utils\";\n\nconst switchStyles = tv({\n  slots: {\n    root: \"disabled:text-fg-disabled group flex items-center justify-start gap-3\",\n    indicator: [\n      \"group-disabled:border-border-disabled group-selected:group-disabled:border-none group-selected:group-disabled:bg-bg-disabled group-selected:bg-border-focus bg-bg-neutral inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors group-disabled:cursor-not-allowed group-disabled:border group-disabled:bg-transparent\",\n    ],\n    thumb:\n      \"group-disabled:bg-fg-disabled pointer-events-none block origin-right rounded-full bg-white shadow-lg ring-0 transition-all duration-200\",\n  },\n  variants: {\n    variant: {\n      default: { indicator: focusRingGroup() },\n      card: {\n        root: [\n          focusRing(),\n          \"selected:bg-bg-muted disabled:selected:bg-bg-disabled disabled:border-border-disabled cursor-pointer flex-row-reverse justify-between gap-4 rounded-md border p-4 transition-colors\",\n        ],\n      },\n    },\n    size: {\n      sm: {\n        indicator: \"h-5 w-9\",\n        thumb:\n          \"group-pressed:w-5 group-selected:ml-4 group-selected:group-pressed:ml-3 size-4\",\n      },\n      md: {\n        indicator: \"h-6 w-11\",\n        thumb:\n          \"group-pressed:w-6 group-selected:ml-5 group-selected:group-pressed:ml-4 size-5\",\n      },\n      lg: {\n        indicator: \"w-13 h-7\",\n        thumb:\n          \"group-pressed:w-7 group-selected:ml-6 group-selected:group-pressed:ml-5 size-6\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n});\n\nconst { root, indicator, thumb } = switchStyles();\n\nconst [SwitchProvider, useSwitchContext] =\n  createScopedContext<VariantProps<typeof switchStyles>>(\"SwitchRoot\");\n\ninterface SwitchProps extends SwitchRootProps {}\nconst Switch = ({ children, ...props }: SwitchProps) => {\n  return (\n    <SwitchRoot {...props}>\n      {composeRenderProps(children, (children) => (\n        <>\n          <SwitchIndicator>\n            <SwitchThumb />\n          </SwitchIndicator>\n          {children}\n        </>\n      ))}\n    </SwitchRoot>\n  );\n};\n\ninterface SwitchRootProps\n  extends React.ComponentProps<typeof AriaSwitch>,\n    VariantProps<typeof switchStyles> {}\nconst SwitchRoot = ({\n  variant,\n  size,\n  className,\n  ...props\n}: SwitchRootProps) => {\n  return (\n    <SwitchProvider variant={variant} size={size}>\n      <AriaSwitch\n        className={composeRenderProps(className, (className) =>\n          root({ variant, size, className })\n        )}\n        {...props}\n      />\n    </SwitchProvider>\n  );\n};\n\ninterface SwitchIndicatorProps extends React.ComponentProps<\"span\"> {}\nconst SwitchIndicator = ({ className, ...props }: SwitchIndicatorProps) => {\n  const { variant, size } = useSwitchContext(\"SwitchIndicator\");\n  return (\n    <span className={indicator({ variant, size, className })} {...props} />\n  );\n};\n\ninterface SwitchThumbProps extends React.ComponentProps<\"span\"> {}\nconst SwitchThumb = ({ className, ...props }: SwitchThumbProps) => {\n  const { variant, size } = useSwitchContext(\"SwitchThumb\");\n  return <span className={thumb({ variant, size, className })} {...props} />;\n};\n\nexport type {\n  SwitchProps,\n  SwitchRootProps,\n  SwitchIndicatorProps,\n  SwitchThumbProps,\n};\nexport { Switch, SwitchRoot, SwitchIndicator, SwitchThumb };\n",
      "path": "core/switch.tsx"
    }
  ]
}