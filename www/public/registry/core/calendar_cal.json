{
  "name": "calendar_cal",
  "type": "core",
  "registryDeps": [
    "button",
    "text",
    "focus-styles"
  ],
  "files": [
    {
      "type": "core",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport {\n  Calendar as AriaCalendar,\n  RangeCalendar as AriaRangeCalendar,\n  CalendarCell as AriaCalendarCell,\n  CalendarGrid as AriaCalendarGrid,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  CalendarHeaderCell as AriaCalendarHeaderCell,\n  CalendarGridBody as AriaCalendarGridBody,\n  CalendarContext as AriaCalendarContext,\n  RangeCalendarContext as AriaRangeCalendarContext,\n  RangeCalendarStateContext as AriaRangeCalendarStateContext,\n  Heading as AriaHeading,\n  composeRenderProps,\n  useSlottedContext,\n} from \"react-aria-components\";\nimport type {\n  DateValue,\n  CalendarProps as AriaCalendarProps,\n  RangeCalendarProps as AriaRangeCalendarProps,\n} from \"react-aria-components\";\nimport { tv, VariantProps } from \"tailwind-variants\";\nimport { Button } from \"@/registry/core/button_basic\";\nimport { Text } from \"@/registry/core/text_basic\";\nimport { focusRing } from \"@/registry/lib/focus-styles\";\nimport { ButtonGroup } from \"./button-group_basic\";\n\nconst calendarStyles = tv({\n  slots: {\n    root: \"flex flex-col gap-4\",\n    header: \"text-fg-muted flex items-center justify-between gap-2 pl-2.5\",\n    grid: \"w-full border-collapse\",\n    gridHeader: \"\",\n    gridHeaderCell: \"text-fg-muted text-xs font-normal\",\n    gridBody: \"\",\n  },\n  variants: {\n    standalone: {\n      true: {\n        root: \"bg-bg rounded-md border p-3\",\n      },\n    },\n  },\n});\n\nconst calendarCellStyles = tv({\n  slots: {\n    cellRoot:\n      \"outside-month:hidden selection-start:rounded-l-md selection-end:rounded-r-md outline-none\",\n    cell: [\n      focusRing(),\n      \"hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 hover:unavailable:bg-transparent unavailable:cursor-default unavailable:text-fg-disabled disabled:text-fg-disabled unavailable:not-data-disabled:line-through my-1 flex size-8 cursor-pointer items-center justify-center rounded-md text-sm transition-colors read-only:cursor-default hover:read-only:bg-transparent disabled:cursor-default disabled:bg-transparent\",\n    ],\n  },\n  variants: {\n    variant: {\n      primary: {},\n      accent: {},\n    },\n    range: {\n      true: {\n        cellRoot:\n          \"selected:bg-bg-inverse/10 selected:invalid:bg-bg-danger-muted selected: selected:invalid:text-fg-danger\",\n        cell: \"selection-start:invalid:bg-bg-danger selection-start:invalid:text-fg-onDanger selection-end:invalid:bg-bg-danger selection-end:invalid:text-fg-onDanger\",\n      },\n      false: {\n        cell: \"selected:invalid:bg-bg-danger selected:invalid:text-fg-onDanger\",\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      variant: \"primary\",\n      range: false,\n      className: {\n        cell: \"selected:bg-bg-primary selected:text-fg-onPrimary\",\n      },\n    },\n    {\n      variant: \"accent\",\n      range: false,\n      className: {\n        cell: \"selected:bg-bg-accent selected:text-fg-onAccent\",\n      },\n    },\n    {\n      variant: \"primary\",\n      range: true,\n      className: {\n        cell: \"selection-start:bg-bg-primary selection-start:text-fg-onPrimary selection-end:bg-bg-primary selection-end:text-fg-onPrimary\",\n      },\n    },\n    {\n      variant: \"accent\",\n      range: true,\n      className: {\n        cell: \"selection-start:bg-bg-accent selection-start:text-fg-onAccent selection-end:bg-bg-accent selection-end:text-fg-onAccent\",\n      },\n    },\n  ],\n  defaultVariants: {\n    variant: \"accent\",\n  },\n});\n\nconst { root, header, grid, gridHeader, gridHeaderCell, gridBody } =\n  calendarStyles();\n\nconst { cellRoot, cell } = calendarCellStyles();\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<CalendarRootProps<T>, \"visibleDuration\">,\n    Omit<VariantProps<typeof calendarCellStyles>, \"range\"> {\n  visibleMonths?: number;\n  errorMessage?: string;\n}\nconst Calendar = <T extends DateValue>({\n  variant,\n  visibleMonths = 1,\n  errorMessage,\n  ...props\n}: CalendarProps<T>) => {\n  visibleMonths = Math.min(Math.max(visibleMonths, 1), 3);\n  return (\n    <CalendarRoot visibleDuration={{ months: visibleMonths }} {...props}>\n      {({ isInvalid }) => (\n        <>\n          <CalendarHeader>\n            <AriaHeading className=\"text-sm font-medium\" />\n            <ButtonGroup variant=\"quiet\" shape=\"square\" size=\"sm\">\n              <Button slot=\"previous\">\n                <ChevronLeftIcon />\n              </Button>\n              <Button slot=\"next\">\n                <ChevronRightIcon />\n              </Button>\n            </ButtonGroup>\n          </CalendarHeader>\n          <div className=\"flex items-start gap-4\">\n            {Array.from({ length: visibleMonths }).map((_, index) => (\n              <CalendarGrid\n                key={index}\n                offset={index === 0 ? undefined : { months: index }}\n              >\n                <CalendarGridHeader>\n                  {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n                </CalendarGridHeader>\n                <CalendarGridBody>\n                  {(date) => <CalendarCell variant={variant} date={date} />}\n                </CalendarGridBody>\n              </CalendarGrid>\n            ))}\n          </div>\n          {isInvalid && errorMessage && (\n            <Text slot=\"errorMessage\">{errorMessage}</Text>\n          )}\n        </>\n      )}\n    </CalendarRoot>\n  );\n};\n\ninterface RangeCalendarProps<T extends DateValue>\n  extends Omit<RangeCalendarRootProps<T>, \"visibleDuration\">,\n    Omit<VariantProps<typeof calendarCellStyles>, \"range\"> {\n  visibleMonths?: number;\n  errorMessage?: string;\n}\nconst RangeCalendar = <T extends DateValue>({\n  variant,\n  visibleMonths = 1,\n  errorMessage,\n  ...props\n}: RangeCalendarProps<T>) => {\n  visibleMonths = Math.min(Math.max(visibleMonths, 1), 3);\n  return (\n    <RangeCalendarRoot visibleDuration={{ months: visibleMonths }} {...props}>\n      {({ isInvalid }) => (\n        <>\n          <CalendarHeader>\n            <Button slot=\"previous\" variant=\"outline\" shape=\"square\" size=\"sm\">\n              <ChevronLeftIcon />\n            </Button>\n            <AriaHeading className=\"text-sm font-medium\" />\n            <Button slot=\"next\" variant=\"outline\" shape=\"square\" size=\"sm\">\n              <ChevronRightIcon />\n            </Button>\n          </CalendarHeader>\n          <div className=\"flex items-start gap-4\">\n            {Array.from({ length: visibleMonths }).map((_, index) => (\n              <CalendarGrid\n                key={index}\n                offset={index === 0 ? undefined : { months: index }}\n              >\n                <CalendarGridHeader>\n                  {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n                </CalendarGridHeader>\n                <CalendarGridBody>\n                  {(date) => <CalendarCell variant={variant} date={date} />}\n                </CalendarGridBody>\n              </CalendarGrid>\n            ))}\n          </div>\n          {isInvalid && errorMessage && (\n            <Text slot=\"errorMessage\">{errorMessage}</Text>\n          )}\n        </>\n      )}\n    </RangeCalendarRoot>\n  );\n};\n\ninterface CalendarRootProps<T extends DateValue> extends AriaCalendarProps<T> {}\nconst CalendarRoot = <T extends DateValue>({\n  className,\n  ...props\n}: CalendarRootProps<T>) => {\n  const CalendarContext = useSlottedContext(AriaCalendarContext);\n  const standalone = Object.keys(CalendarContext ?? {}).length === 0;\n  return (\n    <AriaCalendar\n      className={composeRenderProps(className, (className) =>\n        root({ standalone, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface RangeCalendarRootProps<T extends DateValue>\n  extends AriaRangeCalendarProps<T> {}\nconst RangeCalendarRoot = <T extends DateValue>({\n  className,\n  ...props\n}: RangeCalendarRootProps<T>) => {\n  const CalendarContext = useSlottedContext(AriaRangeCalendarContext);\n  const standalone = Object.keys(CalendarContext ?? {}).length === 0;\n  return (\n    <AriaRangeCalendar\n      className={composeRenderProps(className, (className) =>\n        root({ standalone, className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface CalendarHeaderProps extends React.ComponentProps<\"header\"> {}\nconst CalendarHeader = ({ className, ...props }: CalendarHeaderProps) => {\n  return <header className={header({ className })} {...props} />;\n};\n\ninterface CalendarGridProps\n  extends React.ComponentProps<typeof AriaCalendarGrid> {}\nconst CalendarGrid = ({ className, ...props }: CalendarGridProps) => {\n  return <AriaCalendarGrid className={grid({ className })} {...props} />;\n};\n\ninterface CalendarGridHeaderProps\n  extends React.ComponentProps<typeof AriaCalendarGridHeader> {}\nconst CalendarGridHeader = ({\n  className,\n  ...props\n}: CalendarGridHeaderProps) => {\n  return (\n    <AriaCalendarGridHeader className={gridHeader({ className })} {...props} />\n  );\n};\n\ninterface CalendarHeaderCellProps\n  extends React.ComponentProps<typeof AriaCalendarHeaderCell> {}\nconst CalendarHeaderCell = ({\n  className,\n  ...props\n}: CalendarHeaderCellProps) => {\n  return (\n    <AriaCalendarHeaderCell\n      className={gridHeaderCell({ className })}\n      {...props}\n    />\n  );\n};\n\ninterface CalendarGridBodyProps\n  extends React.ComponentProps<typeof AriaCalendarGridBody> {}\nconst CalendarGridBody = ({ className, ...props }: CalendarGridBodyProps) => {\n  return (\n    <AriaCalendarGridBody className={gridBody({ className })} {...props} />\n  );\n};\n\ninterface CalendarCellProps\n  extends React.ComponentProps<typeof AriaCalendarCell>,\n    Omit<VariantProps<typeof calendarCellStyles>, \"range\"> {}\nconst CalendarCell = ({\n  variant,\n  children,\n  className,\n  ...props\n}: CalendarCellProps) => {\n  const rangeCalendarState = React.use(AriaRangeCalendarStateContext);\n  const range = !!rangeCalendarState;\n  return (\n    <AriaCalendarCell\n      {...props}\n      className={composeRenderProps(className, (className) =>\n        cellRoot({ variant, range, className })\n      )}\n    >\n      {composeRenderProps(\n        children,\n        (\n          _,\n          {\n            isSelected,\n            isFocused,\n            isHovered,\n            isPressed,\n            isUnavailable,\n            isDisabled,\n            isFocusVisible,\n            isInvalid,\n            isOutsideMonth,\n            isOutsideVisibleRange,\n            isSelectionEnd,\n            isSelectionStart,\n            formattedDate,\n          }\n        ) => (\n          <span\n            data-rac=\"\"\n            data-focused={isFocused || undefined}\n            data-selected={isSelected || undefined}\n            data-hovered={isHovered || undefined}\n            data-pressed={isPressed || undefined}\n            data-unavailable={isUnavailable || undefined}\n            data-disabled={isDisabled || undefined}\n            data-focus-visible={isFocusVisible || undefined}\n            data-invalid={isInvalid || undefined}\n            data-outside-month={isOutsideMonth || undefined}\n            data-outside-visible-range={isOutsideVisibleRange || undefined}\n            data-selection-end={isSelectionEnd || undefined}\n            data-selection-start={isSelectionStart || undefined}\n            className={cell({\n              variant,\n              range,\n            })}\n          >\n            {formattedDate}\n          </span>\n        )\n      )}\n    </AriaCalendarCell>\n  );\n};\n\nexport type {\n  CalendarProps,\n  CalendarRootProps,\n  RangeCalendarProps,\n  RangeCalendarRootProps,\n  CalendarGridProps,\n  CalendarGridHeaderProps,\n  CalendarHeaderCellProps,\n  CalendarGridBodyProps,\n  CalendarCellProps,\n};\n\nexport {\n  Calendar,\n  CalendarRoot,\n  RangeCalendar,\n  RangeCalendarRoot,\n  CalendarHeader,\n  CalendarGrid,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  CalendarGridBody,\n  CalendarCell,\n  calendarStyles,\n};\n",
      "path": "core/calendar.tsx"
    }
  ]
}