{
  "name": "select",
  "registryDependencies": [
    "button",
    "field",
    "list-box",
    "popover"
  ],
  "files": [
    {
      "type": "core",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ChevronDownIcon } from \"lucide-react\";\nimport {\n  composeRenderProps,\n  Select as AriaSelect,\n  SelectValue as AriaSelectValue,\n  type SelectProps as AriaSelectProps,\n  type SelectValueProps as AriaSelectValueProps,\n  ListBoxItemProps,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { Button, type ButtonProps } from \"@/registry/core/button_basic\";\nimport { HelpText, Label, type FieldProps } from \"@/registry/core/field_basic\";\nimport {\n  Item,\n  ListBox,\n  type ListBoxProps,\n} from \"@/registry/core/list-box_basic\";\nimport { Popover } from \"@/registry/core/popover_basic\";\n\nconst selectStyles = tv({\n  slots: {\n    root: \"flex w-48 flex-col items-start gap-2\",\n    selectValue: \"flex-1 text-left\",\n  },\n});\n\nconst { root, selectValue } = selectStyles();\n\ninterface SelectProps<T extends object>\n  extends Omit<SelectRootProps<T>, \"children\">,\n    FieldProps {\n  children?: ListBoxProps<T>[\"children\"];\n  dependencies?: ListBoxProps<T>[\"dependencies\"];\n  items?: ListBoxProps<T>[\"items\"];\n  isLoading?: ListBoxProps<T>[\"isLoading\"];\n  variant?: ButtonProps[\"variant\"];\n  size?: ButtonProps[\"size\"];\n}\nconst Select = <T extends object>({\n  variant,\n  size,\n  label,\n  description,\n  errorMessage,\n  children,\n  dependencies,\n  items,\n  isLoading,\n  ...props\n}: SelectProps<T>) => {\n  return (\n    <SelectRoot {...props}>\n      {label && <Label>{label}</Label>}\n      <Button\n        variant={variant}\n        size={size}\n        suffix={<ChevronDownIcon />}\n        className=\"w-full\"\n      >\n        <SelectValue />\n      </Button>\n      <HelpText description={description} errorMessage={errorMessage} />\n      <Popover>\n        <ListBox\n          isLoading={isLoading}\n          items={items}\n          dependencies={dependencies}\n        >\n          {children}\n        </ListBox>\n      </Popover>\n    </SelectRoot>\n  );\n};\n\ntype SelectValueProps<T extends object> = AriaSelectValueProps<T>;\nconst SelectValue = <T extends object>({\n  className,\n  ...props\n}: SelectValueProps<T>) => {\n  return (\n    <AriaSelectValue\n      className={composeRenderProps(className, (className) =>\n        selectValue({ className })\n      )}\n      {...props}\n    />\n  );\n};\n\ninterface SelectRootProps<T extends object>\n  extends Omit<AriaSelectProps<T>, \"className\"> {\n  className?: string;\n}\nconst SelectRoot = <T extends object>({\n  className,\n  ...props\n}: SelectRootProps<T>) => {\n  return <AriaSelect className={root({ className })} {...props} />;\n};\n\ninterface SelectItemProps<T> extends ListBoxItemProps<T> {}\nconst SelectItem = Item;\n\nexport type { SelectProps, SelectRootProps, SelectItemProps, SelectValueProps };\nexport { Select, SelectRoot, SelectItem, SelectValue };\n",
      "path": "core/select.tsx"
    }
  ]
}