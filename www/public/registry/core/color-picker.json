{
  "name": "color-picker",
  "files": [
    {
      "type": "registry:core",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport {\n  ColorPicker as AriaColorPicker,\n  ColorPickerStateContext,\n  getColorChannels,\n  composeRenderProps,\n  type ColorFormat,\n} from \"react-aria-components\";\nimport { Button, type ButtonProps } from \"@/registry/core/button_basic\";\nimport { ColorArea } from \"@/registry/core/color-area_basic\";\nimport { ColorField } from \"@/registry/core/color-field_basic\";\nimport { ColorSlider } from \"@/registry/core/color-slider_basic\";\nimport { ColorSwatch } from \"@/registry/core/color-swatch_basic\";\nimport { Dialog, DialogProps, DialogRoot } from \"@/registry/core/dialog_basic\";\nimport { Item } from \"@/registry/core/list-box_basic\";\nimport { Select } from \"@/registry/core/select_basic\";\nimport { cn } from \"@/registry/lib/utils\";\n\ninterface ColorPickerProps\n  extends ColorPickerRootProps,\n    Omit<ColorPickerButtonProps, \"children\" | \"value\">,\n    Pick<\n      ColorPickerEditorProps,\n      \"showAlphaChannel\" | \"colorFormat\" | \"showFormatSelector\"\n    >,\n    Pick<DialogProps, \"isOpen\" | \"onOpenChange\"> {}\nconst ColorPicker = ({\n  value,\n  defaultValue,\n  onChange,\n  children,\n  showAlphaChannel,\n  colorFormat,\n  showFormatSelector,\n  isOpen,\n  onOpenChange,\n  ...props\n}: ColorPickerProps) => {\n  return (\n    <ColorPickerRoot\n      value={value}\n      defaultValue={defaultValue}\n      onChange={onChange}\n      {...props}\n    >\n      {composeRenderProps(children, (children) => (\n        <>\n          <DialogRoot isOpen={isOpen} onOpenChange={onOpenChange}>\n            <ColorPickerButton {...props}>{children}</ColorPickerButton>\n            <Dialog type=\"popover\" mobileType=\"drawer\">\n              <ColorPickerEditor\n                showAlphaChannel={showAlphaChannel}\n                colorFormat={colorFormat}\n                showFormatSelector={showFormatSelector}\n              />\n            </Dialog>\n          </DialogRoot>\n        </>\n      ))}\n    </ColorPickerRoot>\n  );\n};\n\ninterface ColorPickerRootProps\n  extends React.ComponentProps<typeof AriaColorPicker> {}\nconst ColorPickerRoot = (props: ColorPickerRootProps) => {\n  return <AriaColorPicker value=\"\" onChange={() => {}} {...props} />;\n};\n\ninterface ColorPickerButtonProps extends Omit<ButtonProps, \"children\"> {\n  children?: React.ReactNode;\n  format?: ColorFormat | \"css\";\n  showValue?: boolean;\n}\nconst ColorPickerButton = ({\n  children,\n  format = \"hex\",\n  showValue = true,\n  ...props\n}: ColorPickerButtonProps) => {\n  const state = React.use(ColorPickerStateContext)!;\n  return (\n    <Button {...props}>\n      {children || (\n        <>\n          <ColorSwatch />\n          {showValue && (\n            <span className=\"w-14 truncate text-left\">\n              {state.color.toString(format)}\n            </span>\n          )}\n        </>\n      )}\n    </Button>\n  );\n};\n\ntype PickerColorFormat = \"hex\" | \"rgb\" | \"hsl\" | \"hsb\";\ninterface ColorPickerEditorProps extends React.ComponentProps<\"div\"> {\n  showAlphaChannel?: boolean;\n  colorFormat?: PickerColorFormat;\n  showFormatSelector?: boolean;\n}\nconst ColorPickerEditor = ({\n  showAlphaChannel = false,\n  colorFormat: ColorFormatProp = \"hex\",\n  showFormatSelector = true,\n  className,\n  ...props\n}: ColorPickerEditorProps) => {\n  const [colorFormat, setColorFormat] =\n    React.useState<PickerColorFormat>(ColorFormatProp);\n\n  return (\n    <div className={cn(\"mx-auto flex flex-col gap-2\", className)} {...props}>\n      <div className=\"flex gap-2\">\n        <ColorArea\n          colorSpace=\"hsb\"\n          xChannel=\"saturation\"\n          yChannel=\"brightness\"\n        />\n        <ColorSlider orientation=\"vertical\" colorSpace=\"hsb\" channel=\"hue\" />\n        {showAlphaChannel && (\n          <ColorSlider\n            orientation=\"vertical\"\n            colorSpace=\"hsb\"\n            channel=\"alpha\"\n          />\n        )}\n      </div>\n      <div\n        className={cn(\n          \"flex flex-col gap-2\",\n          colorFormat === \"hex\" && \"flex-row\"\n        )}\n      >\n        {showFormatSelector && (\n          <Select\n            aria-label=\"Color format\"\n            selectedKey={colorFormat}\n            onSelectionChange={(key) =>\n              setColorFormat(key as PickerColorFormat)\n            }\n            size=\"sm\"\n            className=\"w-auto\"\n          >\n            <Item id=\"hex\">Hex</Item>\n            <Item id=\"rgb\">RGB</Item>\n            <Item id=\"hsl\">HSL</Item>\n            <Item id=\"hsb\">HSB</Item>\n          </Select>\n        )}\n        <div className=\"flex flex-1 items-center gap-2\">\n          {colorFormat === \"hex\" ? (\n            <ColorField aria-label=\"Hex\" className=\"w-10 flex-1\" size=\"sm\" />\n          ) : (\n            getColorChannels(colorFormat).map((channel) => (\n              <ColorField\n                key={channel}\n                colorSpace={colorFormat}\n                channel={channel}\n                className=\"w-10 flex-1\"\n                size=\"sm\"\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport type {\n  ColorPickerProps,\n  ColorPickerRootProps,\n  ColorPickerButtonProps,\n  ColorPickerEditorProps,\n};\nexport { ColorPicker, ColorPickerRoot, ColorPickerButton, ColorPickerEditor };\n",
      "target": "core/color-picker.tsx"
    }
  ]
}