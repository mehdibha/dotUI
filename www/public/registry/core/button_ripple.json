{
  "name": "button_ripple",
  "files": [
    {
      "type": "registry:core",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { chain } from \"react-aria\";\nimport {\n  composeRenderProps,\n  Button as AriaButton,\n  Link as AriaLink,\n  type ButtonProps as AriaButtonProps,\n  type LinkProps as AriaLinkProps,\n  PressEvent,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { createOptionalScopedContext } from \"@/lib/utils\";\nimport { Loader } from \"@/registry/core/loader_ring\";\nimport { Ripple } from \"@/registry/core/ripple\";\nimport { useRipple } from \"@/registry/hooks/use-ripple\";\nimport { focusRing } from \"@/registry/lib/focus-styles\";\n\nconst buttonStyles = tv({\n  extend: focusRing,\n  base: \"disabled:bg-bg-disabled disabled:text-fg-disabled pending:cursor-default pending:bg-bg-disabled pending:text-fg-disabled pending:border pending:border-border-disabled relative inline-flex shrink-0 cursor-pointer items-center justify-center gap-2 overflow-hidden whitespace-nowrap rounded-md text-sm font-medium leading-normal transition-colors disabled:cursor-default\",\n  variants: {\n    variant: {\n      default: \"bg-bg-neutral hover:bg-bg-neutral-hover text-fg-onNeutral\",\n      primary: \"bg-bg-primary hover:bg-bg-primary-hover text-fg-onPrimary\",\n      quiet: \"hover:bg-bg-inverse/10 text-fg bg-transparent\",\n      outline:\n        \"border-border-field hover:bg-bg-inverse/10 text-fg disabled:border-border-disabled border disabled:bg-transparent\",\n      accent: \"bg-bg-accent hover:bg-bg-accent-hover text-fg-onAccent\",\n      success: \"bg-bg-success hover:bg-bg-success-hover text-fg-onSuccess\",\n      warning: \"bg-bg-warning hover:bg-bg-warning-hover text-fg-onWarning\",\n      danger: \"bg-bg-danger hover:bg-bg-danger-hover text-fg-onDanger\",\n    },\n    size: {\n      sm: \"size-8 [&_svg]:size-4\",\n      md: \"size-9 [&_svg]:size-4\",\n      lg: \"size-10 [&_svg]:size-5\",\n    },\n    shape: {\n      rectangle: \"\",\n      square: \"\",\n      circle: \"rounded-full\",\n    },\n  },\n  compoundVariants: [\n    {\n      size: \"sm\",\n      shape: \"rectangle\",\n      className: \"w-auto px-3\",\n    },\n    {\n      size: \"md\",\n      shape: \"rectangle\",\n      className: \"w-auto px-4\",\n    },\n    {\n      size: \"lg\",\n      shape: \"rectangle\",\n      className: \"w-auto px-5\",\n    },\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n    shape: \"rectangle\",\n  },\n});\n\nconst [ButtonProvider, useButtonContext] =\n  createOptionalScopedContext<VariantProps<typeof buttonStyles>>(\"Button\");\n\ninterface ButtonProps\n  extends Omit<AriaButtonProps, \"className\">,\n    Omit<AriaLinkProps, \"className\" | \"children\" | \"style\">,\n    VariantProps<typeof buttonStyles> {\n  className?: string;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\n\nconst Button = React.forwardRef(\n  (localProps: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n    const contextProps = useButtonContext();\n    const props = { ...contextProps, ...localProps };\n\n    const { className, variant, size, shape, prefix, suffix, ...restProps } =\n      props;\n\n    const {\n      onPress: onRipplePressHandler,\n      onClear: onClearRipple,\n      ripples,\n    } = useRipple();\n\n    const Element: React.ElementType = props.href ? AriaLink : AriaButton;\n\n    const handlePress = React.useCallback(\n      (e: PressEvent) => {\n        // if (disableRipple || isDisabled || disableAnimation) return;\n        onRipplePressHandler(e);\n        // domRef.current && onRipplePressHandler(e);\n      },\n      [onRipplePressHandler]\n    );\n\n    return (\n      <Element\n        ref={ref}\n        {...restProps}\n        className={buttonStyles({ variant, size, shape, className })}\n        onPress={chain(props.onPress, handlePress)}\n      >\n        {composeRenderProps(props.children, (children, { isPending }) => (\n          <>\n            <Ripple ripples={ripples} onClear={onClearRipple} />\n            {isPending && <Loader aria-label=\"loading\" size={16} />}\n            {prefix}\n            {typeof children === \"string\" ? (\n              <span className=\"truncate\">{children}</span>\n            ) : (\n              children\n            )}\n            {suffix}\n          </>\n        ))}\n      </Element>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport type { ButtonProps };\nexport { Button, buttonStyles, ButtonProvider };\n",
      "target": "core/button.tsx"
    },
    {
      "type": "registry:core",
      "content": "\"use client\";\r\n\r\nimport type { FC } from \"react\";\r\nimport type { HTMLMotionProps } from \"motion/react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport type { RippleType } from \"@/registry/hooks/use-ripple\";\r\n\r\nfunction clamp(value: number, min: number, max: number) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\nexport interface RippleProps extends React.HTMLAttributes<\"span\"> {\r\n  ripples: RippleType[];\r\n  color?: string;\r\n  motionProps?: HTMLMotionProps<\"span\">;\r\n  style?: React.CSSProperties;\r\n  onClear: (key: React.Key) => void;\r\n}\r\n\r\nexport const Ripple: FC<RippleProps> = (props) => {\r\n  const {\r\n    ripples = [],\r\n    motionProps,\r\n    color = \"currentColor\",\r\n    style,\r\n    onClear,\r\n  } = props;\r\n\r\n  return (\r\n    <AnimatePresence mode=\"popLayout\">\r\n      {ripples.map((ripple) => {\r\n        const duration = clamp(\r\n          0.01 * ripple.size,\r\n          0.2,\r\n          ripple.size > 100 ? 0.75 : 0.5\r\n        );\r\n\r\n        return (\r\n          <motion.span\r\n            key={ripple.key}\r\n            initial={{ scale: 0, opacity: 0.35 }}\r\n            animate={{ scale: 2, opacity: 0 }}\r\n            exit={{ opacity: 0 }}\r\n            style={{\r\n              position: \"absolute\",\r\n              backgroundColor: color,\r\n              borderRadius: \"100%\",\r\n              transformOrigin: \"center\",\r\n              pointerEvents: \"none\",\r\n              overflow: \"hidden\",\r\n              inset: 0,\r\n              zIndex: 0,\r\n              top: ripple.y,\r\n              left: ripple.x,\r\n              width: `${ripple.size}px`,\r\n              height: `${ripple.size}px`,\r\n              ...style,\r\n            }}\r\n            transition={{ duration }}\r\n            onAnimationComplete={() => {\r\n              onClear(ripple.key);\r\n            }}\r\n            {...motionProps}\r\n          />\r\n        );\r\n      })}\r\n    </AnimatePresence>\r\n  );\r\n};\r\nRipple.displayName = \"NextUI.Ripple\";\r\n",
      "target": "core/ripple.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import React, { useCallback, useState } from \"react\";\r\nimport type { PressEvent } from \"react-aria-components\";\r\n\r\nfunction getUniqueID(prefix: string) {\r\n  return `${prefix}-${Math.floor(Math.random() * 1000000)}`;\r\n}\r\n\r\nexport type RippleType = {\r\n  key: React.Key;\r\n  x: number;\r\n  y: number;\r\n  size: number;\r\n};\r\n\r\nexport interface UseRippleProps {}\r\n\r\nexport function useRipple(props: UseRippleProps = {}) {\r\n  const [ripples, setRipples] = useState<RippleType[]>([]);\r\n\r\n  const onPress = useCallback((event: PressEvent) => {\r\n    const trigger = event.target;\r\n\r\n    const size = Math.max(trigger.clientWidth, trigger.clientHeight);\r\n\r\n    setRipples((prevRipples) => [\r\n      ...prevRipples,\r\n      {\r\n        key: getUniqueID(prevRipples.length.toString()),\r\n        size,\r\n        x: event.x - size / 2,\r\n        y: event.y - size / 2,\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  const onClear = useCallback((key: React.Key) => {\r\n    setRipples((prevState) => prevState.filter((ripple) => ripple.key !== key));\r\n  }, []);\r\n\r\n  return { ripples, onClear, onPress, ...props };\r\n}\r\n\r\nexport type UseRippleReturn = ReturnType<typeof useRipple>;\r\n",
      "target": "hooks/use-ripple.ts"
    }
  ]
}