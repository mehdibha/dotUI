{
  "name": "menu",
  "files": [
    {
      "type": "registry:core",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { CheckIcon, ChevronRightIcon } from \"lucide-react\";\nimport {\n  composeRenderProps,\n  Menu as AriaMenu,\n  MenuTrigger as AriaMenuTrigger,\n  MenuItem as AriaMenuItem,\n  SubmenuTrigger as AriaSubmenuTrigger,\n  type MenuItemProps as AriaMenuItemProps,\n  type MenuProps as AriaMenuProps,\n  type MenuTriggerProps as AriaMenuTriggerProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Kbd } from \"@/registry/core/kbd_basic\";\nimport { Overlay, type OverlayProps } from \"@/registry/core/overlay_basic\";\nimport { Text } from \"@/registry/core/text_basic\";\n\nconst menuStyles = tv({\n  base: [\n    \"max-h[inherit] outline-hidden rounded-[inherit] p-1\",\n    \"group-data-[type=drawer]/overlay:p-2\",\n    \"[&_.separator]:-mx-1 [&_.separator]:my-1 [&_.separator]:w-auto\",\n  ],\n});\n\nconst menuItemStyles = tv({\n  base: [\n    \"focus:bg-bg-inverse/10 disabled:text-fg-disabled outline-hidden flex cursor-pointer items-center gap-2 rounded-sm px-3 py-1.5 text-sm transition-colors disabled:pointer-events-none\",\n    \"selection-single:pl-0 selection-multiple:pl-0\",\n    \"group-data-[type=drawer]/overlay:text-md group-data-[type=drawer]/overlay:py-3\",\n    \"group-data-[type=modal]/overlay:text-md group-data-[type=modal]/overlay:py-2\",\n    \"[&_svg]:size-4\",\n  ],\n  variants: {\n    variant: {\n      default: \"text-fg\",\n      success: \"text-fg-success\",\n      warning: \"text-fg-warning\",\n      accent: \"text-fg-accent\",\n      danger: \"text-fg-danger\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ntype MenuRootProps = AriaMenuTriggerProps;\nconst MenuRoot = (props: MenuRootProps) => {\n  return <AriaMenuTrigger {...props} />;\n};\n\ntype MenuProps<T> = MenuContentProps<T> & {\n  type?: OverlayProps[\"type\"];\n  mobileType?: OverlayProps[\"mobileType\"];\n};\nconst Menu = <T extends object>({\n  type = \"popover\",\n  mobileType = \"drawer\",\n  ...props\n}: MenuProps<T>) => {\n  return (\n    <Overlay type={type} mobileType={mobileType}>\n      <MenuContent {...props} />\n    </Overlay>\n  );\n};\n\ntype MenuContentProps<T> = AriaMenuProps<T>;\nconst MenuContent = <T extends object>({\n  className,\n  ...props\n}: MenuContentProps<T>) => {\n  return <AriaMenu className={menuStyles({ className })} {...props} />;\n};\n\nconst MenuSub = AriaSubmenuTrigger;\n\ninterface MenuItemProps<T>\n  extends Omit<AriaMenuItemProps<T>, \"className\">,\n    VariantProps<typeof menuItemStyles> {\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n  label?: string;\n  description?: string;\n  shortcut?: string;\n  className?: string;\n}\nconst MenuItem = <T extends object>({\n  className,\n  label,\n  description,\n  prefix,\n  suffix,\n  shortcut,\n  variant,\n  ...props\n}: MenuItemProps<T>) => {\n  return (\n    <AriaMenuItem className={menuItemStyles({ className, variant })} {...props}>\n      {composeRenderProps(\n        props.children,\n        (children, { selectionMode, isSelected, hasSubmenu }) => (\n          <>\n            {selectionMode !== \"none\" && (\n              <span className=\"flex w-8 items-center justify-center\">\n                {isSelected && (\n                  <CheckIcon aria-hidden className=\"text-fg-accent size-4\" />\n                )}\n              </span>\n            )}\n            {prefix}\n            <span className=\"flex items-center gap-2\">\n              <span className=\"flex flex-1 flex-col\">\n                {label && <Text slot=\"label\">{label}</Text>}\n                {description && <Text slot=\"description\">{description}</Text>}\n                {children}\n              </span>\n              {suffix}\n              {shortcut && <Kbd>{shortcut}</Kbd>}\n              {hasSubmenu && (\n                <ChevronRightIcon aria-hidden className=\"size-4\" />\n              )}\n            </span>\n          </>\n        )\n      )}\n    </AriaMenuItem>\n  );\n};\n\nexport type { MenuRootProps, MenuProps };\nexport { MenuRoot, Menu, MenuItem, MenuContent, MenuSub };\n",
      "target": "core/menu.tsx"
    }
  ]
}