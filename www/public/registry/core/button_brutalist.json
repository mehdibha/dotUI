{
  "name": "button_brutalist",
  "registryDependencies": [
    "loader",
    "focus-styles"
  ],
  "files": [
    {
      "type": "core",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  composeRenderProps,\r\n  Button as AriaButton,\r\n  Link as AriaLink,\r\n  type ButtonProps as AriaButtonProps,\r\n  type LinkProps as AriaLinkProps,\r\n} from \"react-aria-components\";\r\nimport { tv, type VariantProps } from \"tailwind-variants\";\r\nimport { createOptionalScopedContext } from \"@/lib/utils\";\r\nimport { Loader } from \"@/registry/core/loader_ring\";\r\nimport { focusRing } from \"@/registry/lib/focus-styles\";\r\n\r\nconst buttonStyles = tv(\r\n  {\r\n    extend: focusRing,\r\n    base: [\r\n      \"disabled:bg-bg-disabled disabled:text-fg-disabled pending:cursor-default pending:bg-bg-disabled pending:text-fg-disabled pending:border pending:border-border-disabled inline-flex shrink-0 cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium leading-normal transition-all disabled:cursor-default\",\r\n      \"shadow-brutalism hover:translate-x-(--box-shadow-x) hover:translate-y-(--box-shadow-y) hover:shadow-none\",\r\n    ],\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-bg-neutral text-fg-onNeutral\",\r\n        primary: \"bg-bg-primary text-fg-onPrimary\",\r\n        quiet: \"text-fg bg-transparent\",\r\n        outline:\r\n          \"border-border-field hover:bg-bg-inverse/10 pressed:bg-bg-inverse/15 text-fg disabled:border-border-disabled border disabled:bg-transparent\",\r\n        accent:\r\n          \"bg-bg-accent hover:bg-bg-accent-hover pressed:bg-bg-accent-active text-fg-onAccent\",\r\n        success:\r\n          \"bg-bg-success hover:bg-bg-success-hover pressed:bg-bg-success-active text-fg-onSuccess\",\r\n        warning:\r\n          \"bg-bg-warning hover:bg-bg-warning-hover pressed:bg-bg-warning-active text-fg-onWarning\",\r\n        danger:\r\n          \"bg-bg-danger hover:bg-bg-danger-hover pressed:bg-bg-danger-active text-fg-onDanger\",\r\n      },\r\n      size: {\r\n        sm: \"size-8 [&_svg]:size-4\",\r\n        md: \"size-9 [&_svg]:size-4\",\r\n        lg: \"size-10 [&_svg]:size-5\",\r\n      },\r\n      shape: {\r\n        rectangle: \"\",\r\n        square: \"\",\r\n        circle: \"rounded-full\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        size: \"sm\",\r\n        shape: \"rectangle\",\r\n        className: \"w-auto px-3\",\r\n      },\r\n      {\r\n        size: \"md\",\r\n        shape: \"rectangle\",\r\n        className: \"w-auto px-4\",\r\n      },\r\n      {\r\n        size: \"lg\",\r\n        shape: \"rectangle\",\r\n        className: \"w-auto px-5\",\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"md\",\r\n      shape: \"rectangle\",\r\n    },\r\n  },\r\n  {\r\n    responsiveVariants: [\"sm\", \"lg\"],\r\n  }\r\n);\r\n\r\nconst [ButtonProvider, useButtonContext] =\r\n  createOptionalScopedContext<VariantProps<typeof buttonStyles>>(\"Button\");\r\n\r\ninterface ButtonProps\r\n  extends Omit<AriaButtonProps, \"className\">,\r\n    Omit<AriaLinkProps, \"className\" | \"children\" | \"style\">,\r\n    VariantProps<typeof buttonStyles> {\r\n  className?: string;\r\n  prefix?: React.ReactNode;\r\n  suffix?: React.ReactNode;\r\n}\r\n\r\nconst Button = React.forwardRef(\r\n  (localProps: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\r\n    const contextProps = useButtonContext();\r\n    const props = { ...contextProps, ...localProps };\r\n\r\n    const { className, variant, size, shape, prefix, suffix, ...restProps } =\r\n      props;\r\n\r\n    const Element: React.ElementType = props.href ? AriaLink : AriaButton;\r\n\r\n    return (\r\n      <Element\r\n        ref={ref}\r\n        {...restProps}\r\n        className={buttonStyles({ variant, size, shape, className })}\r\n      >\r\n        {composeRenderProps(props.children, (children, { isPending }) => (\r\n          <>\r\n            {isPending && <Loader aria-label=\"loading\" size={16} />}\r\n            {prefix}\r\n            {typeof children === \"string\" ? (\r\n              <span className=\"truncate\">{children}</span>\r\n            ) : (\r\n              children\r\n            )}\r\n            {suffix}\r\n          </>\r\n        ))}\r\n      </Element>\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport type { ButtonProps };\r\nexport { Button, buttonStyles, ButtonProvider };\r\n",
      "path": "core/button.tsx"
    }
  ]
}