{
  "name": "progress-bar",
  "type": "registry:core",
  "files": [
    {
      "path": "core/progress-bar_basic.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ProgressBar as AriaProgress,\n  composeRenderProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Label } from \"@/registry/core/field_basic\";\nimport { createScopedContext } from \"@/registry/lib/context-helpers\";\n\nconst progressStyles = tv({\n  slots: {\n    root: \"flex w-60 flex-col gap-2\",\n    indicator: \"relative h-2.5 w-full overflow-hidden rounded-full\",\n    filler: [\n      \"bg-fg h-full w-full min-w-14 flex-1 origin-left transition-transform\",\n      \"indeterminate:animate-progress-indeterminate indeterminate:[-webkit-mask-image:linear-gradient(75deg,rgb(0,0,0)_30%,rgba(0,0,0,0.65)_80%)] indeterminate:[-webkit-mask-size:200%] indeterminate:[mask-image:linear-gradient(75deg,rgb(0,0,0)_30%,rgba(0,0,0,0.65)_80%)] indeterminate:[mask-size:200%]\",\n    ],\n    valueLabel: \"text-sm\",\n  },\n  variants: {\n    variant: {\n      primary: {\n        indicator: \"bg-bg-muted\",\n        filler: \"bg-bg-primary\",\n      },\n      accent: {\n        indicator: \"bg-bg-accent-muted\",\n        filler: \"bg-bg-accent\",\n      },\n      warning: {\n        indicator: \"bg-bg-warning-muted\",\n        filler: \"bg-bg-warning\",\n      },\n      danger: {\n        indicator: \"bg-bg-danger-muted\",\n        filler: \"bg-bg-danger\",\n      },\n      success: {\n        indicator: \"bg-bg-success-muted\",\n        filler: \"bg-bg-success\",\n      },\n    },\n    size: {\n      sm: {\n        indicator: \"h-1\",\n      },\n      md: {\n        indicator: \"h-2.5\",\n      },\n      lg: {\n        indicator: \"h-4\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"accent\",\n    size: \"md\",\n  },\n});\n\nconst { root, indicator, filler, valueLabel } = progressStyles();\n\nconst [ProgressBarProvider, useProgressBarContext] = createScopedContext<\n  VariantProps<typeof progressStyles> & {\n    isIndeterminate: boolean;\n    duration: `${number}s` | `${number}ms`;\n    valueText?: string;\n    percentage?: number;\n  }\n>(\"ProgressRoot\");\n\ninterface ProgressBarProps extends ProgressBarRootProps {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  showValueLabel?: boolean;\n}\nconst ProgressBar = ({\n  label,\n  description,\n  showValueLabel = false,\n  ...props\n}: ProgressBarProps) => {\n  return (\n    <ProgressBarRoot {...props}>\n      <div className=\"grid grid-cols-[1fr_auto] [grid-template-areas:'label_value']\">\n        {label && <Label className=\"[grid-area:label]\">{label}</Label>}\n        {showValueLabel && (\n          <ProgressBarValueLabel className=\"[grid-area:value]\" />\n        )}\n      </div>\n      <ProgressBarIndicator />\n    </ProgressBarRoot>\n  );\n};\n\ninterface ProgressBarRootProps\n  extends React.ComponentProps<typeof AriaProgress>,\n    VariantProps<typeof progressStyles> {\n  duration?: `${number}s` | `${number}ms`;\n}\nconst ProgressBarRoot = ({\n  variant,\n  size,\n  duration = \"0s\",\n  isIndeterminate,\n  children,\n  className,\n  ...props\n}: ProgressBarRootProps) => {\n  return (\n    <AriaProgress\n      className={composeRenderProps(className, (className) =>\n        root({ variant, className })\n      )}\n      isIndeterminate={\n        isIndeterminate || (duration !== \"0s\" && duration !== \"0ms\")\n      }\n      {...props}\n    >\n      {composeRenderProps(\n        children,\n        (children, { isIndeterminate, valueText, percentage }) => (\n          <ProgressBarProvider\n            duration={duration}\n            variant={variant}\n            size={size}\n            isIndeterminate={isIndeterminate}\n            valueText={valueText}\n            percentage={percentage}\n          >\n            {children}\n          </ProgressBarProvider>\n        )\n      )}\n    </AriaProgress>\n  );\n};\n\ninterface ProgressBarIndicatorProps extends React.ComponentProps<\"div\"> {}\nconst ProgressBarIndicator = ({\n  className,\n  ...props\n}: ProgressBarIndicatorProps) => {\n  const { variant, size, isIndeterminate, percentage, duration } =\n    useProgressBarContext(\"ProgressBarIndicator\");\n  return (\n    <div className={indicator({ variant, size, className })} {...props}>\n      <div\n        data-rac=\"\"\n        data-indeterminate={isIndeterminate || undefined}\n        className={filler({ variant, size })}\n        style={\n          {\n            \"--progress-duration\": duration,\n            transform: percentage ? `scaleX(${percentage / 100})` : undefined,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n};\n\ninterface ProgressBarValueLabelProps extends React.ComponentProps<\"span\"> {}\nconst ProgressBarValueLabel = ({\n  className,\n  ...props\n}: ProgressBarValueLabelProps) => {\n  const { valueText } = useProgressBarContext(\"ProgressBarValueLabel\");\n\n  return (\n    <span className={valueLabel({ className })} {...props}>\n      {valueText}\n    </span>\n  );\n};\n\nexport type {\n  ProgressBarProps,\n  ProgressBarRootProps,\n  ProgressBarIndicatorProps,\n  ProgressBarValueLabelProps,\n};\n\nexport {\n  ProgressBar,\n  ProgressBarRoot,\n  ProgressBarIndicator,\n  ProgressBarValueLabel,\n};\n",
      "type": "registry:core",
      "target": "core/progress-bar.tsx"
    }
  ]
}