{
  "name": "combobox",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "button",
    "field",
    "input",
    "list-box",
    "overlay"
  ],
  "files": [
    {
      "path": "core/combobox/combobox.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  ComboBox as AriaCombobox,\r\n  type ComboBoxProps as AriaComboboxProps,\r\n} from \"react-aria-components\";\r\nimport { tv } from \"tailwind-variants\";\r\nimport { ChevronDownIcon } from \"@/__icons__\";\r\nimport { Button } from \"@/registry/ui/default/core/button\";\r\nimport { Field, type FieldProps } from \"@/registry/ui/default/core/field\";\r\nimport { Input, InputRoot } from \"@/registry/ui/default/core/input\";\r\nimport { ListBox } from \"@/registry/ui/default/core/list-box\";\r\nimport { Overlay } from \"@/registry/ui/default/core/overlay\";\r\n\r\nconst comboboxStyles = tv({\r\n  slots: {\r\n    root: \"flex flex-col items-start gap-2 w-48\",\r\n  },\r\n});\r\n\r\ninterface ComboboxProps<T extends object>\r\n  extends Omit<ComboboxRootProps<T>, \"children\">,\r\n    Omit<FieldProps, \"children\"> {\r\n  isLoading?: boolean;\r\n  children: React.ReactNode | ((item: T) => React.ReactNode);\r\n  items?: Iterable<T>;\r\n}\r\nconst Combobox = <T extends object>({\r\n  label,\r\n  description,\r\n  errorMessage,\r\n  necessityIndicator,\r\n  contextualHelp,\r\n  children,\r\n  items,\r\n  isLoading,\r\n  ...props\r\n}: ComboboxProps<T>) => {\r\n  return (\r\n    <ComboboxRoot {...props}>\r\n      {({ isRequired }) => (\r\n        <>\r\n          <Field\r\n            label={label}\r\n            description={description}\r\n            errorMessage={errorMessage}\r\n            isRequired={isRequired}\r\n            necessityIndicator={necessityIndicator}\r\n            contextualHelp={contextualHelp}\r\n          >\r\n            <ComboboxTrigger />\r\n          </Field>\r\n          <Overlay type=\"popover\">\r\n            <ListBox items={items} isLoading={isLoading}>\r\n              {children}\r\n            </ListBox>\r\n          </Overlay>\r\n        </>\r\n      )}\r\n    </ComboboxRoot>\r\n  );\r\n};\r\n\r\nconst ComboboxTrigger = () => {\r\n  return (\r\n    <InputRoot className=\"px-0\">\r\n      <Input className=\"pl-2\" />\r\n      <Button variant=\"default\" shape=\"square\" className=\"size-7 my-1 mr-1\">\r\n        <ChevronDownIcon />\r\n      </Button>\r\n    </InputRoot>\r\n  );\r\n};\r\n\r\ninterface ComboboxRootProps<T extends object>\r\n  extends Omit<AriaComboboxProps<T>, \"className\"> {\r\n  className?: string;\r\n}\r\nconst ComboboxRoot = <T extends object>({\r\n  className,\r\n  ...props\r\n}: ComboboxRootProps<T>) => {\r\n  const { root } = comboboxStyles();\r\n  return <AriaCombobox className={root({ className })} {...props} />;\r\n};\r\n\r\nexport type { ComboboxProps, ComboboxRootProps };\r\nexport { Combobox, ComboboxRoot, ComboboxTrigger };\r\n",
      "type": "registry:core",
      "target": "core/combobox.tsx"
    }
  ]
}