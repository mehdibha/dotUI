{
  "name": "range-calendar",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "heading",
    "text"
  ],
  "files": [
    {
      "path": "core/range-calendar/range-calendar.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  composeRenderProps,\r\n  RangeCalendar as AriaRangeCalendar,\r\n  type RangeCalendarProps as AriaRangeCalendarProps,\r\n  type DateValue,\r\n  RangeCalendarContext as AriaRangeCalendarContext,\r\n  useSlottedContext,\r\n} from \"react-aria-components\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@/__icons__\";\r\nimport { Button } from \"@/registry/ui/default/core/button\";\r\nimport {\r\n  CalendarHeader,\r\n  CalendarGrid,\r\n  CalendarGridHeader,\r\n  CalendarHeaderCell,\r\n  CalendarGridBody,\r\n  CalendarCell,\r\n  calendarStyles,\r\n} from \"@/registry/ui/default/core/calendar\";\r\nimport { Heading } from \"@/registry/ui/default/core/heading\";\r\nimport { Text } from \"@/registry/ui/default/core/text\";\r\n\r\ninterface RangeCalendarProps<T extends DateValue>\r\n  extends Omit<AriaRangeCalendarProps<T>, \"visibleDuration\"> {\r\n  visibleMonths?: number;\r\n  errorMessage?: string;\r\n}\r\nconst RangeCalendar = <T extends DateValue>({\r\n  visibleMonths = 1,\r\n  errorMessage,\r\n  ...props\r\n}: RangeCalendarProps<T>) => {\r\n  visibleMonths = Math.min(Math.max(visibleMonths, 1), 3);\r\n  return (\r\n    <RangeCalendarRoot visibleDuration={{ months: visibleMonths }} {...props}>\r\n      {({ isInvalid }) => (\r\n        <>\r\n          <CalendarHeader>\r\n            <Button slot=\"previous\" variant=\"outline\" shape=\"square\" size=\"sm\">\r\n              <ChevronLeftIcon />\r\n            </Button>\r\n            <Heading className=\"text-sm\" />\r\n            <Button slot=\"next\" variant=\"outline\" shape=\"square\" size=\"sm\">\r\n              <ChevronRightIcon />\r\n            </Button>\r\n          </CalendarHeader>\r\n          <div className=\"flex items-start gap-4\">\r\n            {Array.from({ length: visibleMonths }).map((_, index) => (\r\n              <CalendarGrid\r\n                key={index}\r\n                offset={index === 0 ? undefined : { months: index }}\r\n              >\r\n                <CalendarGridHeader>\r\n                  {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\r\n                </CalendarGridHeader>\r\n                <CalendarGridBody>\r\n                  {(date) => (\r\n                    <CalendarCell date={date} range>\r\n                      {({ formattedDate }) => (\r\n                        <span className=\"z-20\">{formattedDate}</span>\r\n                      )}\r\n                    </CalendarCell>\r\n                  )}\r\n                </CalendarGridBody>\r\n              </CalendarGrid>\r\n            ))}\r\n          </div>\r\n          {isInvalid && errorMessage && (\r\n            <Text slot=\"errorMessage\">{errorMessage}</Text>\r\n          )}\r\n        </>\r\n      )}\r\n    </RangeCalendarRoot>\r\n  );\r\n};\r\n\r\ntype RangeCalendarRootProps<T extends DateValue> = AriaRangeCalendarProps<T>;\r\nconst RangeCalendarRoot = <T extends DateValue>(\r\n  props: RangeCalendarRootProps<T>\r\n) => {\r\n  const CalendarContext = useSlottedContext(AriaRangeCalendarContext);\r\n  const standalone = Object.keys(CalendarContext ?? {}).length === 0;\r\n  const { root } = calendarStyles({ standalone });\r\n  return (\r\n    <AriaRangeCalendar\r\n      className={composeRenderProps(props.className, (className) =>\r\n        root({ className })\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport type { RangeCalendarProps, RangeCalendarRootProps };\r\nexport { RangeCalendar, RangeCalendarRoot };\r\n",
      "type": "registry:core",
      "target": "core/range-calendar.tsx"
    }
  ]
}