import { promises as fs } from "fs";
import path from "path";
import { rimraf } from "rimraf";

import { registryBlocks } from "@dotui/ui/registry/registry-blocks";

const REGISTRY_DIR = path.join(process.cwd(), "src/__registry__");

async function setup() {
  await rimraf(REGISTRY_DIR);
  await fs.mkdir(REGISTRY_DIR, { recursive: true });
}

async function buildBlocks() {
  const TARGET_PATH = path.join(REGISTRY_DIR, "blocks.tsx");

  let index = `// This file is autogenerated by scripts/build-blocks.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<
  string,
  {
    files: string[];
    component: React.LazyExoticComponent<React.ComponentType<object>>;
  }
> = {
`;

  for (const block of registryBlocks) {
    const blockFiles =
      block.files?.map((file) => {
        const filePath = typeof file === "string" ? file : file.path;
        return `registry/${filePath}`;
      }) || [];

    let componentPath = `@dotui/ui/registry/blocks/${block.name}`;

    if (block.files && block.files.length > 0) {
      const files = block.files.map((file) =>
        typeof file === "string" ? { type: "registry:page", path: file } : file,
      );
      if (files?.length && files[0]) {
        const firstFilePath = files[0].path.replace(/\.tsx?$/, "");
        componentPath = `@dotui/ui/registry/${firstFilePath}`;
      }
    }

    index += `
  "${block.name}": {
    files: ${JSON.stringify(blockFiles)},
    component: React.lazy(() => import("${componentPath}")),
  },`;
  }

  index += `
}
`;

  const outputDir = path.dirname(TARGET_PATH);
  await fs.mkdir(outputDir, { recursive: true });

  await fs.writeFile(TARGET_PATH, index, "utf8");
}

async function main() {
  console.log("üî® Building registry...");

  try {
    await setup();
    await buildBlocks();
    console.log("‚úÖ Registry built successfully!");
  } catch (error) {
    console.error("‚ùå Error building blocks registry:", error);
    process.exit(1);
  }
}

main();
