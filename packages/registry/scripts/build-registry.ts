import { existsSync, promises as fs } from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { rimraf } from "rimraf";

interface SyncConfig {
  sourceDir: string;
  targetDir: string;
  foldersToSync: string[];
}

interface ImportTransformation {
  pattern: RegExp;
  replacer: (match: string, ...args: any[]) => string;
}

// Content transformation rules
const IMPORT_TRANSFORMATIONS: ImportTransformation[] = [
  // Transform registry imports to UI package imports
  {
    pattern: /from\s+["']@dotui\/registry\/([^"']+?)["']/g,
    replacer: (match, importPath) => {
      return `from "@dotui/ui/${importPath}"`;
    },
  },
  // Transform style-engine imports to maintain consistency
  {
    pattern: /from\s+["']@dotui\/style-engine\/([^"']+?)["']/g,
    replacer: (match, importPath) => {
      return `from "@dotui/style-engine/${importPath}"`;
    },
  },
  // Transform relative imports within registry
  {
    pattern: /from\s+["']\.\.\/([^"']+?)["']/g,
    replacer: (match, relativePath) => {
      const parts = relativePath.split("/");
      const fileName = parts.pop()?.split(".")[0];
      if (fileName && parts.length > 0) {
        return `from "@dotui/ui/${[...parts, fileName].join("/")}"`;
      }
      return match;
    },
  },
];

// ----------------------------------------------------------------------------
// Setup and cleanup target directories
// ----------------------------------------------------------------------------
async function setupTargetDirectories(config: SyncConfig): Promise<void> {
  const { targetDir, foldersToSync } = config;

  // Clean up existing folders
  for (const folder of foldersToSync) {
    const targetFolderPath = path.join(targetDir, folder);
    if (existsSync(targetFolderPath)) {
      rimraf.sync(targetFolderPath);
      console.log(`üóëÔ∏è  Cleaned existing: ${folder}`);
    }
  }

  // Ensure target directory exists
  if (!existsSync(targetDir)) {
    await fs.mkdir(targetDir, { recursive: true });
  }

  // Create autogenerated marker
  const markerPath = path.join(targetDir, ".autogenerated");
  await fs.writeFile(
    markerPath,
    "This directory is autogenerated by packages/registry/scripts/sync-to-ui.ts\nDo not edit its contents directly.",
    "utf8",
  );
}

// ----------------------------------------------------------------------------
// Transform file content with import path updates
// ----------------------------------------------------------------------------
function transformFileContent(content: string, filePath: string): string {
  let transformedContent = content;

  // Apply all import transformations
  for (const { pattern, replacer } of IMPORT_TRANSFORMATIONS) {
    transformedContent = transformedContent.replace(pattern, replacer);
  }

  // Add header comment for generated files
  if (filePath.endsWith(".tsx") || filePath.endsWith(".ts")) {
    const header = `// This file is synced from @dotui/registry
// Do not edit this file directly - it will be overwritten
`;
    if (!transformedContent.startsWith("//")) {
      transformedContent = header + "\n" + transformedContent;
    }
  }

  return transformedContent;
}

// ----------------------------------------------------------------------------
// Recursively copy directory with content transformation
// ----------------------------------------------------------------------------
async function copyDirectoryWithTransform(
  sourceDir: string,
  targetDir: string,
  transformContent: (content: string, filePath: string) => string,
): Promise<void> {
  await fs.mkdir(targetDir, { recursive: true });

  const entries = await fs.readdir(sourceDir, { withFileTypes: true });

  for (const entry of entries) {
    const sourcePath = path.join(sourceDir, entry.name);
    const targetPath = path.join(targetDir, entry.name);

    if (entry.isDirectory()) {
      await copyDirectoryWithTransform(
        sourcePath,
        targetPath,
        transformContent,
      );
    } else if (entry.isFile()) {
      const content = await fs.readFile(sourcePath, "utf8");
      const transformedContent = transformContent(content, sourcePath);

      await fs.writeFile(targetPath, transformedContent, "utf8");
      console.log(`‚úì Synced: ${path.relative(sourceDir, sourcePath)}`);
    }
  }
}

// ----------------------------------------------------------------------------
// Main sync function
// ----------------------------------------------------------------------------
async function syncRegistryToUI(config: SyncConfig): Promise<void> {
  const { sourceDir, targetDir, foldersToSync } = config;

  console.log(`üîÑ Syncing registry folders [${foldersToSync.join(", ")}]`);
  console.log(`üìÇ Source: ${sourceDir}`);
  console.log(`üìÅ Target: ${targetDir}`);

  try {
    await setupTargetDirectories(config);

    // Sync each specified folder
    for (const folder of foldersToSync) {
      const sourceFolderPath = path.join(sourceDir, folder);
      const targetFolderPath = path.join(targetDir, folder);

      if (existsSync(sourceFolderPath)) {
        await copyDirectoryWithTransform(
          sourceFolderPath,
          targetFolderPath,
          transformFileContent,
        );
        console.log(`üìÅ Completed folder: ${folder}`);
      } else {
        console.warn(`‚ö†Ô∏è  Source folder not found: ${sourceFolderPath}`);
      }
    }

    console.log(`‚úÖ Successfully synced registry to UI package`);
  } catch (error) {
    console.error(`‚ùå Sync failed:`, error);
    process.exit(1);
  }
}

// ----------------------------------------------------------------------------
// Main execution
// ----------------------------------------------------------------------------
async function main(): Promise<void> {
  const scriptDir = path.dirname(fileURLToPath(import.meta.url));
  const registrySourceDir = path.resolve(scriptDir, "../src");
  const uiTargetDir = path.resolve(scriptDir, "../../ui/src");

  const config: SyncConfig = {
    sourceDir: registrySourceDir,
    targetDir: uiTargetDir,
    foldersToSync: ["ui", "hooks", "lib"],
  };

  await syncRegistryToUI(config);
}

// ----------------------------------------------------------------------------
// Entry point
// ----------------------------------------------------------------------------
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error("‚ùå Script execution failed:", error);
    process.exit(1);
  });
}

export { syncRegistryToUI, transformFileContent, IMPORT_TRANSFORMATIONS };
