{
  "name": "radio-group",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "field"
  ],
  "files": [
    {
      "path": "core/radio-group/radio-group.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  composeRenderProps,\n  Radio as AriaRadio,\n  RadioGroup as AriaRadioGroup,\n  type RadioGroupProps as AriaRadioGroupProps,\n  type RadioProps as AriaRadioProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Field, type FieldProps } from \"@/registry/ui/default/core/field\";\nimport { focusRing, focusRingGroup } from \"@/registry/ui/default/lib/styles\";\n\nconst radioGroupStyles = tv({\n  slots: {\n    root: \"group/radio-group flex flex-col gap-2\",\n    wrapper:\n      \"flex flex-col gap-1 group-orientation-horizontal/radio-group:flex-row group-orientation-horizontal/radio-group:gap-3\",\n  },\n});\n\nconst radioStyles = tv({\n  slots: {\n    root: \"group flex flex-row items-center gap-2 disabled:text-fg-disabled invalid:text-fg-danger cursor-pointer disabled:cursor-default\",\n    indicator: [\n      focusRing(),\n      \"relative size-4 shrink-0 rounded-full border border-border-control group-selected:border-bg-primary group-selected:border-4 transition-all duration-100\",\n      \"group-disabled:border-border-disabled group-disabled:selected:bg-bg-disabled group-disabled:indeterminate:bg-bg-disabled\",\n      \"group-invalid:border-border-danger group-invalid:selected:border-bg-danger\",\n    ],\n  },\n  variants: {\n    variant: {\n      default: {\n        indicator: focusRingGroup(),\n      },\n      card: {\n        root: [\n          focusRing(),\n          \"border p-4 rounded-md flex-row-reverse gap-4 selected:bg-bg-muted disabled:selected:bg-bg-disabled transition-colors disabled:border-border-disabled\",\n        ],\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ninterface RadioGroupProps\n  extends RadioGroupRootProps,\n    VariantProps<typeof radioGroupStyles>,\n    Omit<FieldProps, \"children\"> {\n  className?: string;\n}\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof AriaRadioGroup>,\n  RadioGroupProps\n>(\n  (\n    {\n      label,\n      description,\n      errorMessage,\n      necessityIndicator,\n      contextualHelp,\n      ...props\n    },\n    ref\n  ) => {\n    const { wrapper } = radioGroupStyles();\n    return (\n      <RadioGroupRoot ref={ref} {...props}>\n        {composeRenderProps(props.children, (children, { isRequired }) => (\n          <Field\n            label={label}\n            description={description}\n            errorMessage={errorMessage}\n            isRequired={isRequired}\n            necessityIndicator={necessityIndicator}\n            contextualHelp={contextualHelp}\n          >\n            <div className={wrapper()}>{children}</div>\n          </Field>\n        ))}\n      </RadioGroupRoot>\n    );\n  }\n);\nRadioGroup.displayName = \"RadioGroup\";\n\ninterface RadioGroupRootProps\n  extends Omit<AriaRadioGroupProps, \"className\">,\n    VariantProps<typeof radioStyles> {\n  className?: string;\n}\nconst RadioGroupRoot = React.forwardRef<\n  React.ElementRef<typeof AriaRadioGroup>,\n  RadioGroupRootProps\n>(({ className, variant, ...props }, ref) => {\n  const { root } = radioGroupStyles();\n  return (\n    <RadioContext.Provider value={{ variant }}>\n      <AriaRadioGroup ref={ref} className={root({ className })} {...props} />\n    </RadioContext.Provider>\n  );\n});\nRadioGroupRoot.displayName = \"RadioGroupRoot\";\n\ninterface RadioProps\n  extends Omit<AriaRadioProps, \"className\">,\n    VariantProps<typeof radioStyles> {\n  className?: string;\n}\nconst Radio = React.forwardRef<React.ElementRef<typeof AriaRadio>, RadioProps>(\n  (localProps, ref) => {\n    const contextProps = useRadioContext();\n    const props = { ...contextProps, ...localProps };\n    const { className, variant, ...restProps } = props;\n    const { root, indicator } = radioStyles({ variant });\n    return (\n      <AriaRadio ref={ref} {...restProps} className={root({ className })}>\n        {composeRenderProps(props.children, (children) => (\n          <>\n            <div className={indicator({ className: \"\" })} />\n            <span>{children}</span>\n          </>\n        ))}\n      </AriaRadio>\n    );\n  }\n);\nRadio.displayName = \"Radio\";\n\ntype RadioContextValue = VariantProps<typeof radioStyles>;\nconst RadioContext = React.createContext<RadioContextValue>({});\nconst useRadioContext = () => {\n  return React.useContext(RadioContext);\n};\n\nexport type { RadioGroupRootProps, RadioGroupProps, RadioProps };\nexport { RadioGroupRoot, RadioGroup, Radio };\n",
      "type": "registry:core",
      "target": "core/radio-group.tsx"
    }
  ]
}