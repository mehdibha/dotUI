{
  "name": "tooltip",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "overlay",
    "text"
  ],
  "files": [
    {
      "path": "core/tooltip/tooltip.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Tooltip as AriaTooltip,\n  TooltipTrigger as AriaTooltipTrigger,\n  OverlayArrow as AriaOverlayArrow,\n  type TooltipProps as AriaTooltipProps,\n  type TooltipTriggerComponentProps as AriaTooltipTriggerProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\n\nconst tooltipVariants = tv({\n  base: \"group/tooltip z-50 bg-bg-tooltip text-fg overflow-hidden rounded-md px-3 py-1.5 text-sm shadow-md will-change-transform entering:animate-in entering:fade-in entering:ease-out entering:placement-bottom:slide-in-from-top-0.5 entering:placement-top:slide-in-from-bottom-0.5 entering:placement-left:slide-in-from-right-0.5 entering:placement-right:slide-in-from-left-0.5 exiting:animate-out exiting:fade-out exiting:ease-in exiting:placement-bottom:slide-out-to-top-0.5 exiting:placement-top:slide-out-to-bottom-0.5 exiting:placement-left:slide-out-to-right-0.5 exiting:placement-right:slide-out-to-left-0.5\",\n});\n\ninterface TooltipProps\n  extends TooltipRootProps,\n    Omit<TooltipContentProps, \"children\">,\n    VariantProps<typeof tooltipVariants> {\n  content?: React.ReactNode;\n  arrow?: boolean;\n}\nconst Tooltip = ({\n  delay,\n  closeDelay,\n  trigger,\n  defaultOpen,\n  isOpen,\n  onOpenChange,\n  isDisabled,\n  content,\n  arrow = true,\n  children,\n  ...props\n}: TooltipProps) => {\n  return (\n    <TooltipRoot\n      delay={delay}\n      closeDelay={closeDelay}\n      trigger={trigger}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      isOpen={isOpen}\n      isDisabled={isDisabled}\n    >\n      {children}\n      <TooltipContent {...props}>\n        {arrow && <OverlayArrow />}\n        {content}\n      </TooltipContent>\n    </TooltipRoot>\n  );\n};\n\ntype TooltipRootProps = AriaTooltipTriggerProps;\nconst TooltipRoot = ({\n  delay = 700,\n  closeDelay = 0,\n  ...props\n}: TooltipRootProps) => (\n  <AriaTooltipTrigger delay={delay} closeDelay={closeDelay} {...props} />\n);\n\ninterface TooltipContentProps\n  extends Omit<AriaTooltipProps, \"className\">,\n    VariantProps<typeof tooltipVariants> {\n  className?: string;\n}\nconst TooltipContent = ({\n  className,\n  offset = 10,\n  ...props\n}: TooltipContentProps) => {\n  return (\n    <AriaTooltip\n      offset={offset}\n      className={tooltipVariants({ className })}\n      {...props}\n    />\n  );\n};\n\ntype OverlayArrowProps = Partial<React.SVGProps<SVGSVGElement>>;\nconst OverlayArrow = (props: OverlayArrowProps) => {\n  return (\n    <AriaOverlayArrow>\n      <svg\n        width={8}\n        height={8}\n        viewBox=\"0 0 8 8\"\n        className=\"z-50 fill-bg-tooltip stroke-border group-placement-left/tooltip:-rotate-90 group-placement-right/tooltip:rotate-90 group-placement-bottom/tooltip:rotate-180\"\n        {...props}\n      >\n        <path d=\"M0 0 L6 6 L12 0\" />\n      </svg>\n    </AriaOverlayArrow>\n  );\n};\n\nexport { Tooltip, TooltipRoot, TooltipContent, OverlayArrow };\nexport type { TooltipProps, TooltipRootProps, TooltipContentProps };\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}