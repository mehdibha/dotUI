{
  "name": "calendar",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "button",
    "heading",
    "text"
  ],
  "files": [
    {
      "path": "core/calendar/calendar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  composeRenderProps,\n  Calendar as AriaCalendar,\n  CalendarCell as AriaCalendarCell,\n  CalendarGrid as AriaCalendarGrid,\n  CalendarGridHeader as AriaCalendarGridHeader,\n  CalendarHeaderCell as AriaCalendarHeaderCell,\n  CalendarGridBody as AriaCalendarGridBody,\n  type CalendarProps as AriaCalendarProps,\n  type CalendarGridProps as AriaCalendarGridProps,\n  type CalendarGridHeaderProps as AriaCalendarGridHeaderProps,\n  type CalendarHeaderCellProps as AriaCalendarHeaderCellProps,\n  type CalendarGridBodyProps as AriaCalendarGridBodyProps,\n  type CalendarCellProps as AriaCalendarCellProps,\n  type DateValue,\n  CalendarContext as AriaCalendarContext,\n  useSlottedContext,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@/lib/icons\";\nimport { Button, buttonStyles } from \"@/registry/ui/default/core/button\";\nimport { Heading } from \"@/registry/ui/default/core/heading\";\nimport { Text } from \"@/registry/ui/default/core/text\";\n\nconst calendarStyles = tv({\n  slots: {\n    root: \"\",\n    header: \"mb-4 flex items-center justify-between gap-2\",\n    grid: \"w-full border-collapse\",\n    gridHeader: \"mb-4\",\n    gridHeaderCell: \"text-xs font-normal text-fg-muted\",\n    gridBody: \"[&>tr>td]:p-0\",\n    cell: \"\",\n  },\n  variants: {\n    standalone: {\n      true: {\n        root: \"border bg-bg rounded-md p-3\",\n      },\n      false: {\n        root: \"rounded-[inherit]\",\n      },\n    },\n    range: {\n      false: {\n        cell: [\n          buttonStyles({\n            variant: \"quiet\",\n            shape: \"square\",\n            size: \"sm\",\n          }),\n          \"my-1 selected:bg-bg-primary selected:text-fg-onPrimary disabled:cursor-default disabled:bg-transparent\",\n          \"selected:invalid:bg-bg-danger selected:invalid:text-fg-onDanger\",\n          \"unavailable:line-through unavailable:hover:bg-transparent unavailable:cursor-default unavailable:text-fg-muted\",\n          \"outside-month:hidden\",\n        ],\n      },\n      true: {\n        cell: [\n          \"relative my-1 flex size-8 items-center justify-center rounded-md text-sm font-normal leading-normal disabled:cursor-default disabled:bg-transparent disabled:text-fg-disabled\",\n          \"after:absolute after:inset-0 after:transition-colors after:content-[''] selected:after:bg-bg-primary/10\",\n          \"before:absolute before:inset-0 before:z-10 before:rounded-[inherit] before:transition-colors before:content-[''] hover:before:bg-bg-inverse/10\",\n          \"outline-none before:border before:border-transparent before:ring-0 before:ring-border-focus focus-visible:z-50 focus-visible:before:border-border focus-visible:before:ring-2 focus-visible:before:ring-offset-2 focus-visible:before:ring-offset-bg\",\n          \"selection-start:after:rounded-l-[inherit] selection-end:after:rounded-r-[inherit]\",\n          \"selection-start:pressed:before:bg-primary/90 selection-start:text-fg-onPrimary selection-start:before:bg-bg-primary\",\n          \"selection-end:pressed:before:bg-primary/90 selection-end:text-fg-onPrimary selection-end:before:bg-bg-primary\",\n          \"selected:invalid:after:bg-bg-danger selected:invalid:[&:not([data-selection-start])]:[&:not([data-selection-end])]:text-fg-onDanger\",\n          \"unavailable:line-through unavailable:hover:before:bg-transparent unavailable:cursor-default unavailable:text-fg-muted\",\n          \"outside-month:hidden\",\n        ],\n      },\n    },\n  },\n  defaultVariants: {\n    range: false,\n  },\n});\n\ninterface CalendarProps<T extends DateValue>\n  extends Omit<AriaCalendarProps<T>, \"visibleDuration\"> {\n  visibleMonths?: number;\n  errorMessage?: string;\n}\nconst Calendar = <T extends DateValue>({\n  errorMessage,\n  visibleMonths = 1,\n  ...props\n}: CalendarProps<T>) => {\n  visibleMonths = Math.min(Math.max(visibleMonths, 1), 3);\n\n  return (\n    <CalendarRoot visibleDuration={{ months: visibleMonths }} {...props}>\n      {({ isInvalid }) => (\n        <>\n          <CalendarHeader>\n            <Button slot=\"previous\" variant=\"outline\" shape=\"square\" size=\"sm\">\n              <ChevronLeftIcon />\n            </Button>\n            <Heading className=\"text-sm\" />\n            <Button slot=\"next\" variant=\"outline\" shape=\"square\" size=\"sm\">\n              <ChevronRightIcon />\n            </Button>\n          </CalendarHeader>\n          <div className=\"flex items-start gap-4\">\n            {Array.from({ length: visibleMonths }).map((_, index) => (\n              <CalendarGrid\n                key={index}\n                offset={index === 0 ? undefined : { months: index }}\n              >\n                <CalendarGridHeader>\n                  {(day) => <CalendarHeaderCell>{day}</CalendarHeaderCell>}\n                </CalendarGridHeader>\n                <CalendarGridBody>\n                  {(date) => <CalendarCell date={date} />}\n                </CalendarGridBody>\n              </CalendarGrid>\n            ))}\n          </div>\n          {isInvalid && errorMessage && (\n            <Text slot=\"errorMessage\">{errorMessage}</Text>\n          )}\n        </>\n      )}\n    </CalendarRoot>\n  );\n};\n\ntype CalendarRootProps<T extends DateValue> = AriaCalendarProps<T>;\nconst CalendarRoot = <T extends DateValue>(props: CalendarRootProps<T>) => {\n  const CalendarContext = useSlottedContext(AriaCalendarContext);\n  const standalone = Object.keys(CalendarContext ?? {}).length === 0;\n  const { root } = calendarStyles({ standalone });\n  return (\n    <AriaCalendar\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        root({ className })\n      )}\n    />\n  );\n};\n\ntype CalendarHeaderProps = React.HTMLAttributes<HTMLElement>;\nconst CalendarHeader = ({ className, ...props }: CalendarHeaderProps) => {\n  const { header } = calendarStyles();\n  return <header className={header({ className })} {...props} />;\n};\n\ntype CalendarGridProps = AriaCalendarGridProps;\nconst CalendarGrid = ({ className, ...props }: CalendarGridProps) => {\n  const { grid } = calendarStyles();\n  return <AriaCalendarGrid className={grid({ className })} {...props} />;\n};\n\ntype CalendarGridHeaderProps = AriaCalendarGridHeaderProps;\nconst CalendarGridHeader = ({\n  className,\n  ...props\n}: CalendarGridHeaderProps) => {\n  const { gridHeader } = calendarStyles();\n  return (\n    <AriaCalendarGridHeader className={gridHeader({ className })} {...props} />\n  );\n};\n\ntype CalendarHeaderCellProps = AriaCalendarHeaderCellProps;\nconst CalendarHeaderCell = ({\n  className,\n  ...props\n}: CalendarHeaderCellProps) => {\n  const { gridHeaderCell } = calendarStyles();\n  return (\n    <AriaCalendarHeaderCell\n      className={gridHeaderCell({ className })}\n      {...props}\n    />\n  );\n};\n\ntype CalendarGridBodyProps = AriaCalendarGridBodyProps;\nconst CalendarGridBody = ({ className, ...props }: CalendarGridBodyProps) => {\n  const { gridBody } = calendarStyles();\n  return (\n    <AriaCalendarGridBody className={gridBody({ className })} {...props} />\n  );\n};\n\ntype CalendarCellProps = AriaCalendarCellProps & { range?: boolean };\nconst CalendarCell = ({ range, ...props }: CalendarCellProps) => {\n  const { cell } = calendarStyles({ range });\n  return (\n    <AriaCalendarCell\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        cell({ className })\n      )}\n    />\n  );\n};\n\nexport type {\n  CalendarProps,\n  CalendarRootProps,\n  CalendarGridProps,\n  CalendarGridHeaderProps,\n  CalendarHeaderCellProps,\n  CalendarGridBodyProps,\n  CalendarCellProps,\n};\nexport {\n  Calendar,\n  CalendarRoot,\n  CalendarHeader,\n  CalendarGrid,\n  CalendarGridHeader,\n  CalendarHeaderCell,\n  CalendarGridBody,\n  CalendarCell,\n  calendarStyles,\n};\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}