{
  "name": "avatar",
  "type": "registry:core",
  "files": [
    {
      "path": "core/avatar/avatar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\n\nconst avatarStyles = tv({\n  slots: {\n    root: \"relative inline-flex align-middle shrink-0 overflow-hidden bg-bg\",\n    image: \"aspect-square size-full\",\n    fallback:\n      \"flex size-full select-none items-center justify-center bg-bg-muted\",\n    placeholder:\n      \"h-full size-full animate-pulse bg-bg-muted flex items-center justify-center\",\n  },\n  variants: {\n    size: {\n      sm: { root: \"size-8\" },\n      md: { root: \"size-10\" },\n      lg: { root: \"size-12\" },\n    },\n    shape: {\n      circle: { root: \"rounded-full\" },\n      square: { root: \"rounded-sm\" },\n    },\n  },\n  defaultVariants: {\n    shape: \"circle\",\n    size: \"md\",\n  },\n});\n\ninterface AvatarProps\n  extends AvatarImageProps,\n    VariantProps<typeof avatarStyles> {\n  fallback?: React.ReactNode;\n}\nconst Avatar = ({\n  fallback,\n  className,\n  style,\n  size,\n  shape,\n  ...props\n}: AvatarProps) => {\n  return (\n    <AvatarRoot className={className} style={style} shape={shape} size={size}>\n      <AvatarImage {...props} />\n      <AvatarFallback>{fallback}</AvatarFallback>\n      <AvatarPlaceholder />\n    </AvatarRoot>\n  );\n};\n\ninterface AvatarRootProps\n  extends React.HTMLAttributes<HTMLSpanElement>,\n    VariantProps<typeof avatarStyles> {}\nconst AvatarRoot = ({ className, shape, size, ...props }: AvatarRootProps) => {\n  const { root } = avatarStyles({ shape, size });\n  const [status, setStatus] = React.useState<Status>(\"idle\");\n  return (\n    <AvatarContext.Provider value={{ status, onStatusChange: setStatus }}>\n      <span className={root({ className })} {...props} />\n    </AvatarContext.Provider>\n  );\n};\n\ninterface AvatarImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  onStatusChange?: (status: Status) => void;\n}\nconst AvatarImage = ({\n  src,\n  onStatusChange,\n  className,\n  ...props\n}: AvatarImageProps) => {\n  const { image } = avatarStyles();\n  const context = useAvatarContext();\n  const status = useImageLoadingStatus(src);\n  // TODO use useCallBackRef here\n  const handleStatusChange = React.useCallback(\n    (status: Status) => {\n      onStatusChange?.(status);\n      context.onStatusChange(status);\n    },\n    [onStatusChange, context]\n  );\n\n  React.useLayoutEffect(() => {\n    if (status !== \"idle\") {\n      handleStatusChange(status);\n    }\n  }, [status, handleStatusChange]);\n\n  return status === \"success\" ? (\n    // eslint-disable-next-line jsx-a11y/alt-text\n    <img src={src} className={image({ className })} {...props} />\n  ) : null;\n};\n\ntype AvatarFallbackProps = React.HTMLAttributes<HTMLSpanElement>;\nconst AvatarFallback = ({ className, ...props }: AvatarFallbackProps) => {\n  const { fallback } = avatarStyles();\n  const context = useAvatarContext();\n\n  return context.status === \"error\" ? (\n    <span className={fallback({ className })} {...props} />\n  ) : null;\n};\n\ntype AvatarPlaceholderProps = React.HTMLAttributes<HTMLSpanElement>;\nconst AvatarPlaceholder = ({ className, ...props }: AvatarPlaceholderProps) => {\n  const { placeholder } = avatarStyles();\n  const context = useAvatarContext();\n\n  return [\"idle\", \"loading\"].includes(context.status) ? (\n    <span className={placeholder({ className })} {...props} />\n  ) : null;\n};\n\ntype AvatarContextValue = {\n  status: Status;\n  onStatusChange: (status: Status) => void;\n};\nconst AvatarContext = React.createContext<AvatarContextValue | null>(null);\nconst useAvatarContext = () => {\n  const context = React.useContext(AvatarContext);\n  if (!context) {\n    throw new Error(\"Avatar components must be rendered within the AvatarRoot\");\n  }\n  return context;\n};\n\ntype Status = \"idle\" | \"loading\" | \"success\" | \"error\";\nconst useImageLoadingStatus = (src?: string) => {\n  const [status, setStatus] = React.useState<Status>(\"idle\");\n\n  React.useLayoutEffect(() => {\n    if (!src) {\n      setStatus(\"error\");\n      return;\n    }\n    let isMounted = true;\n    const image = new window.Image();\n    const updateStatus = (status: Status) => () => {\n      if (!isMounted) return;\n      setStatus(status);\n    };\n    setStatus(\"loading\");\n    image.onload = updateStatus(\"success\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n    return () => {\n      isMounted = false;\n    };\n  }, [src]);\n\n  return status;\n};\n\nexport type {\n  AvatarProps,\n  AvatarRootProps,\n  AvatarImageProps,\n  AvatarFallbackProps,\n};\nexport {\n  Avatar,\n  AvatarRoot,\n  AvatarImage,\n  AvatarFallback,\n  AvatarPlaceholder,\n  avatarStyles,\n};\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}