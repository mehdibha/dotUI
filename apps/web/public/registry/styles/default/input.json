{
  "name": "input",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components",
    "@react-aria/utils",
    "@react-stately/utils"
  ],
  "files": [
    {
      "path": "core/input/input.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { mergeRefs, chain } from \"@react-aria/utils\";\r\nimport { useControlledState } from \"@react-stately/utils\";\r\nimport {\r\n  Provider,\r\n  composeRenderProps,\r\n  Input as AriaInput,\r\n  Group as AriaGroup,\r\n  TextArea as AriaTextArea,\r\n  InputContext as AriaInputContext,\r\n  TextAreaContext as AriaTextAreaContext,\r\n  type TextAreaProps as AriaTextAreaProps,\r\n  type GroupProps as AriaGroupProps,\r\n  type InputProps as AriaInputProps,\r\n  useSlottedContext,\r\n} from \"react-aria-components\";\r\nimport { tv, type VariantProps } from \"tailwind-variants\";\r\nimport { LoaderIcon } from \"@/lib/icons\";\r\nimport { focusInput } from \"@/lib/utils/styles\";\r\n\r\nconst inputStyles = tv({\r\n  slots: {\r\n    root: [\r\n      focusInput(),\r\n      \"inline-flex justify-start items-center gap-2 px-2 transition-colors w-full rounded-md border border-border-field bg-bg shadow-sm cursor-text text-fg-muted text-base sm:text-sm [&_svg]:size-4\",\r\n      \"disabled:cursor-default disabled:border-border-disabled disabled:bg-bg-disabled disabled:text-fg-disabled\",\r\n      \"invalid:border-border-danger focus-within:invalid:border-border\",\r\n    ],\r\n    input: [\r\n      \"bg-transparent outline-none w-full h-full text-fg placeholder:text-fg-muted disabled:text-fg-disabled disabled:cursor-default\",\r\n    ],\r\n  },\r\n  variants: {\r\n    size: {\r\n      sm: { root: \"h-8\" },\r\n      md: { root: \"h-9\" },\r\n      lg: { root: \"h-10\" },\r\n    },\r\n    multiline: {\r\n      true: {\r\n        root: \"h-auto flex-col items-stretch p-2\",\r\n        input: \"min-h-14 resize-none overflow-auto\",\r\n      },\r\n      false: {\r\n        input: \"flex-1\",\r\n      },\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n    multiline: false,\r\n  },\r\n});\r\n\r\ninterface TextAreaInputProps extends Omit<AriaTextAreaProps, \"className\"> {\r\n  className?: string;\r\n}\r\nconst TextAreaInput = React.forwardRef<HTMLTextAreaElement, TextAreaInputProps>(\r\n  ({ className, onChange, rows = 1, ...props }, forwardedRef) => {\r\n    const { input } = inputStyles({ multiline: true });\r\n    const [inputValue, setInputValue] = useControlledState(\r\n      props.value,\r\n      props.defaultValue ?? \"\",\r\n      () => {\r\n        // Do nothing\r\n      }\r\n    );\r\n    const inputRef = React.useRef<HTMLTextAreaElement>(null);\r\n\r\n    const onHeightChange = React.useCallback(() => {\r\n      if (inputRef.current) {\r\n        const input = inputRef.current;\r\n        const prevAlignment = input.style.alignSelf;\r\n        const prevOverflow = input.style.overflow;\r\n        const isFirefox = \"MozAppearance\" in input.style;\r\n        if (!isFirefox) {\r\n          input.style.overflow = \"hidden\";\r\n        }\r\n        input.style.alignSelf = \"start\";\r\n        input.style.height = \"auto\";\r\n        input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\r\n        input.style.overflow = prevOverflow;\r\n        input.style.alignSelf = prevAlignment;\r\n      }\r\n    }, [inputRef]);\r\n\r\n    React.useLayoutEffect(() => {\r\n      if (inputRef.current) {\r\n        onHeightChange();\r\n      }\r\n    }, [onHeightChange, inputValue, inputRef]);\r\n\r\n    return (\r\n      <AriaTextArea\r\n        ref={mergeRefs(inputRef, forwardedRef)}\r\n        className={input({ className })}\r\n        onChange={chain(onChange, setInputValue)}\r\n        rows={rows}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nTextAreaInput.displayName = \"TextAreaInput\";\r\n\r\ninterface InputProps\r\n  extends Omit<AriaInputProps, \"className\" | \"size\" | \"prefix\"> {\r\n  className?: string;\r\n}\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, ...props }, ref) => {\r\n    const { input } = inputStyles();\r\n    return <AriaInput ref={ref} className={input({ className })} {...props} />;\r\n  }\r\n);\r\nInput.displayName = \"Input\";\r\n\r\ninterface InputRootProps\r\n  extends Omit<AriaGroupProps, \"className\" | \"prefix\">,\r\n    VariantProps<typeof inputStyles> {\r\n  prefix?: React.ReactNode;\r\n  suffix?: React.ReactNode;\r\n  isLoading?: boolean;\r\n  loaderPosition?: \"prefix\" | \"suffix\";\r\n  className?: string;\r\n}\r\nconst InputRoot = ({\r\n  className,\r\n  prefix,\r\n  suffix,\r\n  isLoading,\r\n  loaderPosition,\r\n  size,\r\n  multiline,\r\n  ...props\r\n}: InputRootProps) => {\r\n  const { root } = inputStyles({ size, multiline });\r\n  const inputContext = useSlottedContext(AriaInputContext);\r\n  const textAreaContext = useSlottedContext(AriaTextAreaContext);\r\n  const inputRef = React.useRef(null);\r\n  const isDisabled =\r\n    props.isDisabled || inputContext?.disabled || textAreaContext?.disabled;\r\n  const isInvalid =\r\n    props.isInvalid ||\r\n    (!!inputContext?.[\"aria-invalid\"] &&\r\n      inputContext[\"aria-invalid\"] !== \"false\") ||\r\n    (!!textAreaContext?.[\"aria-invalid\"] &&\r\n      textAreaContext[\"aria-invalid\"] !== \"false\");\r\n\r\n  const handlePointerDown = (event: React.PointerEvent<HTMLElement>) => {\r\n    const target = event.target as HTMLElement;\r\n    if (target.closest(\"input, button, a\")) return;\r\n    const input = (\r\n      inputRef as React.RefObject<HTMLInputElement | HTMLTextAreaElement>\r\n    ).current;\r\n    if (!input) return;\r\n    requestAnimationFrame(() => {\r\n      input.focus();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AriaGroup\r\n      role=\"presentation\"\r\n      {...props}\r\n      onPointerDown={handlePointerDown}\r\n      isDisabled={isDisabled}\r\n      isInvalid={isInvalid}\r\n      className={root({ className })}\r\n    >\r\n      {composeRenderProps(props.children, (children) => (\r\n        <Provider\r\n          values={[\r\n            [\r\n              AriaInputContext,\r\n              {\r\n                ...inputContext,\r\n                ref: mergeRefs(inputRef, inputContext?.ref ?? null),\r\n              },\r\n            ],\r\n            [\r\n              AriaTextAreaContext,\r\n              {\r\n                ...textAreaContext,\r\n                ref: mergeRefs(inputRef, textAreaContext?.ref ?? null),\r\n              },\r\n            ],\r\n          ]}\r\n        >\r\n          {isLoading && loaderPosition === \"prefix\" ? (\r\n            <LoaderIcon className=\"animate-spin\" />\r\n          ) : (\r\n            prefix\r\n          )}\r\n          {children}\r\n          {isLoading && loaderPosition === \"suffix\" ? (\r\n            <LoaderIcon className=\"animate-spin\" />\r\n          ) : (\r\n            suffix\r\n          )}\r\n        </Provider>\r\n      ))}\r\n    </AriaGroup>\r\n  );\r\n};\r\n\r\nexport type { InputProps, InputRootProps, TextAreaInputProps };\r\nexport { Input, TextAreaInput, InputRoot, inputStyles };\r\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}