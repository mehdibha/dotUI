{
  "name": "checkbox",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "files": [
    {
      "path": "core/checkbox/checkbox.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Checkbox as AriaCheckbox,\n  composeRenderProps,\n  type CheckboxProps as AriaCheckboxProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { CheckIcon, MinusIcon } from \"@/lib/icons\";\nimport { focusRing, focusRingGroup } from \"@/lib/utils/styles\";\n\nconst checkboxStyles = tv({\n  slots: {\n    root: \"group flex flex-row items-center gap-2 cursor-pointer invalid:text-fg-danger disabled:text-fg-disabled disabled:cursor-default\",\n    indicator: [\n      \"flex items-center justify-center size-4 shrink-0 rounded-sm border border-border-control cursor-pointer\",\n      \"bg-transparent text-transparent group-selected:bg-bg-primary group-selected:text-fg-onPrimary transition-colors duration-75 group-selected:border-transparent\",\n      \"group-indeterminate:bg-bg-primary group-indeterminate:text-fg-onPrimary\",\n      \"group-read-only:cursor-default\",\n      \"group-disabled:cursor-not-allowed group-disabled:border-border-disabled group-disabled:group-selected:text-fg-disabled group-disabled:group-selected:bg-bg-disabled group-disabled:group-indeterminate:bg-bg-disabled\",\n      \"group-invalid:border-border-danger group-invalid:group-selected:bg-bg-danger-muted group-invalid:group-selected:text-fg-onMutedDanger\",\n    ],\n  },\n  variants: {\n    variant: {\n      default: {\n        indicator: focusRingGroup(),\n      },\n      card: {\n        root: [\n          focusRing(),\n          \"border p-4 rounded-md flex-row-reverse gap-4 selected:bg-bg-muted disabled:selected:bg-bg-disabled transition-colors disabled:border-border-disabled\",\n        ],\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ninterface CheckboxProps\n  extends Omit<AriaCheckboxProps, \"className\">,\n    VariantProps<typeof checkboxStyles> {\n  className?: string;\n}\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof AriaCheckbox>,\n  CheckboxProps\n>((localProps, ref) => {\n  const contextProps = useCheckboxContext();\n  const props = { ...contextProps, ...localProps };\n  const { className, variant, ...restProps } = props;\n  const { root, indicator } = checkboxStyles({ variant });\n  return (\n    <AriaCheckbox ref={ref} {...restProps} className={root({ className })}>\n      {composeRenderProps(props.children, (children, { isIndeterminate }) => (\n        <>\n          <div className={indicator({ className: \"\" })}>\n            {isIndeterminate ? (\n              <MinusIcon className=\"size-2.5\" />\n            ) : (\n              <CheckIcon className=\"size-3\" />\n            )}\n          </div>\n          <span>{children}</span>\n        </>\n      ))}\n    </AriaCheckbox>\n  );\n});\nCheckbox.displayName = \"Checkbox\";\n\ntype CheckboxContextValue = VariantProps<typeof checkboxStyles>;\nconst CheckboxContext = React.createContext<CheckboxContextValue>({});\nconst useCheckboxContext = () => {\n  return React.useContext(CheckboxContext);\n};\n\nexport type { CheckboxProps };\nexport { Checkbox, CheckboxContext };\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}