{
  "name": "slider",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "field"
  ],
  "files": [
    {
      "path": "core/slider/slider.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useSlotId } from \"@react-aria/utils\";\nimport {\n  composeRenderProps,\n  Slider as AriaSlider,\n  SliderOutput as AriaSliderOutput,\n  SliderThumb as AriaSliderThumb,\n  SliderTrack as AriaSliderTrack,\n  type SliderThumbProps as AriaSliderThumbProps,\n  type SliderOutputProps as AriaSliderOutputProps,\n  type SliderTrackProps as AriaSliderTrackProps,\n  type SliderProps as AriaSliderProps,\n  SliderStateContext as AriaSliderStateContext,\n  TextContext as AriaTextContext,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { focusRing } from \"@/lib/utils/styles\";\nimport {\n  Description,\n  Label,\n  type FieldProps,\n} from \"@/registry/ui/default/core/field\";\nimport { cn } from \"@/registry/ui/default/lib/cn\";\n\nconst sliderStyles = tv({\n  slots: {\n    root: \"flex flex-col gap-2 orientation-horizontal:w-48 orientation-vertical:h-48 orientation-vertical:items-center\",\n    track: [\n      \"relative group/track rounded-full bg-bg-neutral cursor-pointer disabled:cursor-default disabled:bg-bg-disabled\",\n      \"grow orientation-vertical:flex-1 orientation-vertical:w-2 orientation-horizontal:w-full orientation-horizontal:h-2\",\n    ],\n    filler: [\n      \"rounded-full bg-border-focus group-disabled/track:bg-bg-disabled\",\n      \"pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full\",\n    ],\n    thumb: [\n      focusRing(),\n      \"rounded-full bg-white shadow-md transition-[width,height]\",\n      \"absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2\",\n      \"disabled:bg-bg-disabled disabled:border disabled:border-bg\",\n    ],\n    valueLabel: \"text-fg-muted text-sm\",\n  },\n  variants: {\n    size: {\n      sm: {\n        thumb: \"size-3 dragging:size-4\",\n        track: \"orientation-vertical:w-1 orientation-horizontal:h-1\",\n      },\n      md: {\n        thumb: \"size-4 dragging:size-5\",\n        track: \"orientation-vertical:w-2 orientation-horizontal:h-2\",\n      },\n      lg: {\n        thumb: \"size-5 dragging:size-6\",\n        track: \"orientation-vertical:w-3 orientation-horizontal:h-3\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\ninterface SliderProps\n  extends SliderRootProps,\n    VariantProps<typeof sliderStyles> {\n  label?: FieldProps[\"label\"];\n  description?: FieldProps[\"description\"];\n  valueLabel?: boolean | ((value: number[]) => string);\n}\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof AriaSlider>,\n  SliderProps\n>(({ label, description, valueLabel = false, size, ...props }, ref) => (\n  <SliderRoot ref={ref} {...props}>\n    {(label || !!valueLabel) && (\n      <div\n        className={cn(\n          \"flex items-center justify-between gap-2\",\n          !label && \"justify-end\"\n        )}\n      >\n        {label && <Label>{label}</Label>}\n        {!!valueLabel && (\n          <SliderValueLabel>\n            {({ state }) =>\n              typeof valueLabel === \"function\"\n                ? valueLabel(state.values)\n                : undefined\n            }\n          </SliderValueLabel>\n        )}\n      </div>\n    )}\n    <SliderControls size={size} />\n    {description && <Description>{description}</Description>}\n  </SliderRoot>\n));\nSlider.displayName = \"Slider\";\n\ntype SliderRootProps = AriaSliderProps;\nconst SliderRoot = React.forwardRef(\n  (props: SliderRootProps, ref: React.Ref<HTMLDivElement>) => {\n    const { root } = sliderStyles();\n    const descriptionId = useSlotId();\n    return (\n      <AriaTextContext.Provider\n        value={{ slots: { description: { id: descriptionId } } }}\n      >\n        <AriaSlider\n          ref={ref}\n          aria-describedby={descriptionId}\n          {...props}\n          className={composeRenderProps(props.className, (className) =>\n            root({ className })\n          )}\n        />\n      </AriaTextContext.Provider>\n    );\n  }\n);\nSliderRoot.displayName = \"SliderRoot\";\n\ntype SliderControlsProps = SliderTrackProps & VariantProps<typeof sliderStyles>;\nconst SliderControls = (props: SliderControlsProps) => {\n  const { values } = React.useContext(AriaSliderStateContext);\n  return (\n    <SliderTrack {...props}>\n      <SliderFiller />\n      {values.map((_, i) => (\n        <SliderThumb key={i} index={i} size={props.size} />\n      ))}\n    </SliderTrack>\n  );\n};\n\ntype SliderTrackProps = AriaSliderTrackProps &\n  VariantProps<typeof sliderStyles>;\nconst SliderTrack = ({ size, ...props }: SliderTrackProps) => {\n  const { track } = sliderStyles({ size });\n  return (\n    <AriaSliderTrack\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        track({ className })\n      )}\n    />\n  );\n};\n\ntype SliderFillerProps = React.HTMLAttributes<HTMLDivElement>;\nconst SliderFiller = (props: SliderFillerProps) => {\n  const { filler } = sliderStyles();\n  const { orientation, getThumbPercent, values } = React.useContext(\n    AriaSliderStateContext\n  );\n  return (\n    <div\n      {...props}\n      style={\n        values.length === 1\n          ? orientation === \"horizontal\"\n            ? {\n                width: `${getThumbPercent(0) * 100}%`,\n              }\n            : { height: `${getThumbPercent(0) * 100}%` }\n          : orientation === \"horizontal\"\n            ? {\n                left: `${getThumbPercent(0) * 100}%`,\n                width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`,\n              }\n            : {\n                bottom: `${getThumbPercent(0) * 100}%`,\n                height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`,\n              }\n      }\n      className={filler({ className: props.className })}\n    />\n  );\n};\n\ntype SliderThumbProps = AriaSliderThumbProps &\n  VariantProps<typeof sliderStyles>;\nconst SliderThumb = ({ size, ...props }: SliderThumbProps) => {\n  const { thumb } = sliderStyles({ size });\n  return (\n    <AriaSliderThumb\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        thumb({ className })\n      )}\n    />\n  );\n};\n\ntype SliderValueLabelProps = AriaSliderOutputProps;\nconst SliderValueLabel = (props: SliderValueLabelProps) => {\n  const { valueLabel } = sliderStyles();\n  return (\n    <AriaSliderOutput\n      {...props}\n      className={composeRenderProps(props.className, (className) =>\n        valueLabel({ className })\n      )}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { state }) =>\n          children ??\n          state.values.map((_, i) => state.getThumbValueLabel(i)).join(\" - \")\n      )}\n    </AriaSliderOutput>\n  );\n};\n\nexport {\n  Slider,\n  SliderRoot,\n  SliderControls,\n  SliderTrack,\n  SliderFiller,\n  SliderThumb,\n  SliderValueLabel,\n};\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}