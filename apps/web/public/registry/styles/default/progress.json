{
  "name": "progress",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "field"
  ],
  "files": [
    {
      "path": "core/progress/progress.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ProgressBar as AriaProgress,\n  composeRenderProps,\n  type ProgressBarProps as AriaProgressProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { Label } from \"@/registry/ui/default/core/field\";\nimport { cn } from \"@/registry/ui/default/lib/cn\";\n\nconst progressStyles = tv({\n  slots: {\n    root: \"flex flex-col gap-2 w-60\",\n    indicator: \"relative h-2.5 w-full overflow-hidden rounded-full\",\n    filler:\n      \"h-full animate-progress-grow w-full flex-1 bg-fg transition-transform origin-left min-w-14\",\n    valueLabel: \"text-sm\",\n  },\n  variants: {\n    variant: {\n      default: {\n        indicator: \"bg-bg-muted\",\n        filler: \"bg-bg-primary\",\n      },\n      accent: {\n        indicator: \"bg-bg-accent-muted\",\n        filler: \"bg-bg-accent\",\n      },\n      warning: {\n        indicator: \"bg-bg-warning-muted\",\n        filler: \"bg-bg-warning\",\n      },\n      danger: {\n        indicator: \"bg-bg-danger-muted\",\n        filler: \"bg-bg-danger\",\n      },\n      success: {\n        indicator: \"bg-bg-success-muted\",\n        filler: \"bg-bg-success\",\n      },\n    },\n    size: {\n      sm: {\n        indicator: \"h-1\",\n      },\n      md: {\n        indicator: \"h-2.5\",\n      },\n      lg: {\n        indicator: \"h-4\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    shape: \"bar\",\n    size: \"md\",\n  },\n});\n\ntype ProgressSlots = keyof ReturnType<typeof progressStyles>;\ntype ProgressClassNames = {\n  [key in ProgressSlots]?: string;\n};\n\ninterface ProgressProps\n  extends ProgressRootProps,\n    VariantProps<typeof progressStyles> {\n  label?: string;\n  showValueLabel?: boolean;\n  duration?: string;\n  classNames?: ProgressClassNames;\n}\nconst Progress = ({\n  label,\n  showValueLabel = false,\n  variant,\n  size,\n  duration,\n  className,\n  classNames,\n  ...props\n}: ProgressProps) => {\n  return (\n    <ProgressRoot\n      duration={duration}\n      className={cn(className, classNames?.root)}\n      {...props}\n    >\n      {(label || showValueLabel) && (\n        <div\n          className={cn(\n            \"flex items-center justify-between gap-2\",\n            !label && \"justify-end\"\n          )}\n        >\n          {label && <Label>{label}</Label>}\n          {showValueLabel && <ProgressValueLabel />}\n        </div>\n      )}\n      <ProgressIndicator\n        variant={variant}\n        size={size}\n        duration={duration}\n        classNames={{\n          indicator: classNames?.indicator,\n          filler: classNames?.filler,\n        }}\n      />\n    </ProgressRoot>\n  );\n};\n\ninterface ProgressRootProps extends Omit<AriaProgressProps, \"className\"> {\n  duration?: string;\n  className?: string;\n}\nconst ProgressRoot = ({\n  className,\n  isIndeterminate,\n  duration,\n  ...props\n}: ProgressRootProps) => {\n  const { root } = progressStyles();\n  return (\n    <AriaProgress\n      className={root({ className })}\n      isIndeterminate={isIndeterminate || !!duration}\n      {...props}\n    >\n      {composeRenderProps(\n        props.children,\n        (children, { percentage, isIndeterminate, valueText }) => (\n          <ProgressContext.Provider\n            value={{ percentage, isIndeterminate, valueText }}\n          >\n            {children}\n          </ProgressContext.Provider>\n        )\n      )}\n    </AriaProgress>\n  );\n};\n\ninterface ProgressIndicatorProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof progressStyles> {\n  duration?: string;\n  classNames?: {\n    indicator?: string;\n    filler?: string;\n  };\n}\nconst ProgressIndicator = ({\n  duration,\n  className,\n  variant,\n  size,\n  classNames,\n  ...props\n}: ProgressIndicatorProps) => {\n  const { indicator, filler } = progressStyles({ variant, size });\n  const { isIndeterminate, percentage } = useProgressContext();\n  return (\n    <div\n      className={cn(indicator(), classNames?.indicator, className)}\n      {...props}\n    >\n      <div\n        className={cn(\n          filler(),\n          isIndeterminate && \"animate-progress-indeterminate\",\n          classNames?.filler\n        )}\n        style={\n          {\n            \"--progress-duration\": duration ?? \"0s\",\n            ...(percentage ? { transform: `scaleX(${percentage / 100})` } : {}),\n            ...(isIndeterminate\n              ? {\n                  maskImage:\n                    \"linear-gradient(75deg, rgb(0, 0, 0) 30%, rgba(0, 0, 0, 0.65) 80%)\",\n                  maskSize: \"200%\",\n                }\n              : {}),\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n};\n\ntype ProgressValueLabelProps = React.HTMLAttributes<HTMLSpanElement>;\nconst ProgressValueLabel = ({\n  children,\n  className,\n  ...props\n}: ProgressValueLabelProps) => {\n  const { valueLabel } = progressStyles();\n  const { valueText } = useProgressContext();\n  return (\n    <span className={valueLabel({ className })} {...props}>\n      {children ?? valueText}\n    </span>\n  );\n};\n\ntype ProgressContextValue = {\n  percentage?: number;\n  isIndeterminate: boolean;\n  valueText?: string;\n};\nconst ProgressContext = React.createContext<ProgressContextValue | null>(null);\nconst useProgressContext = () => {\n  const context = React.useContext(ProgressContext);\n  if (!context) {\n    throw new Error(\n      \"useProgressContext must be used within a ProgressProvider\"\n    );\n  }\n  return context;\n};\n\nexport type {\n  ProgressProps,\n  ProgressRootProps,\n  ProgressIndicatorProps,\n  ProgressValueLabelProps,\n};\nexport { Progress, ProgressRoot, ProgressIndicator, ProgressValueLabel };\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}