{
  "name": "scroll-area",
  "type": "registry:core",
  "dependencies": [
    "@radix-ui/react-scroll-area"
  ],
  "files": [
    {
      "path": "core/scroll-area/scroll-area.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport { type VariantProps, tv } from \"tailwind-variants\";\n\nconst scrollAreaStyles = tv({\n  slots: {\n    root: \"flex flex-col h-full w-full overflow-hidden\",\n    viewport: \"h-full w-full flex flex-col [&>*]:!block [&>*]:w-fit [&>*]:grow\",\n    scrollbar:\n      \"flex touch-none select-none flex-col data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col bg-gray-800 rounded-full m-1\",\n    thumb:\n      \"relative before:absolute before:content-[''] before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2] w-full h-full before:min-w-4 before:min-h-4 bg-gray-500 hover:bg-gray-400 transition-colors rounded-[inherit]\",\n  },\n  variants: {\n    size: {\n      sm: {\n        scrollbar:\n          \"data-[orientation=horizontal]:h-1 data-[orientation=vertical]:w-1\",\n      },\n      md: {\n        scrollbar:\n          \"data-[orientation=horizontal]:h-2 data-[orientation=vertical]:w-2\",\n      },\n      lg: {\n        scrollbar:\n          \"data-[orientation=horizontal]:h-3 data-[orientation=vertical]:w-3\",\n      },\n    },\n  },\n  defaultVariants: {\n    size: \"md\",\n  },\n});\n\ninterface ScrollAreaProps\n  extends ScrollAreaRootProps,\n    Omit<ScrollAreaViewPortProps, \"dir\">,\n    VariantProps<typeof scrollAreaStyles> {\n  scrollbars?: \"vertical\" | \"horizontal\" | \"both\";\n}\nconst ScrollArea = ({\n  children,\n  scrollbars = \"vertical\",\n  size,\n  asChild,\n  type,\n  scrollHideDelay,\n  dir,\n  ...viewportProps\n}: ScrollAreaProps) => {\n  return (\n    <ScrollAreaRoot\n      asChild={asChild}\n      scrollHideDelay={scrollHideDelay}\n      dir={dir}\n      type={type}\n    >\n      <ScrollAreaViewPort {...viewportProps}>{children}</ScrollAreaViewPort>\n      {scrollbars !== \"vertical\" && (\n        <ScrollAreaScrollbar orientation=\"horizontal\" size={size} />\n      )}\n      {scrollbars !== \"horizontal\" && (\n        <ScrollAreaScrollbar orientation=\"vertical\" size={size} />\n      )}\n      {scrollbars === \"both\" && <ScrollAreaCorner />}\n    </ScrollAreaRoot>\n  );\n};\n\ntype ScrollAreaRootProps = ScrollAreaPrimitive.ScrollAreaProps;\nconst ScrollAreaRoot = ({ className, ...props }: ScrollAreaRootProps) => {\n  const { root } = scrollAreaStyles();\n  return (\n    <ScrollAreaPrimitive.Root className={root({ className })} {...props} />\n  );\n};\n\ntype ScrollAreaViewPortProps = ScrollAreaPrimitive.ScrollAreaViewportProps;\nconst ScrollAreaViewPort = ({\n  className,\n  ...props\n}: ScrollAreaViewPortProps) => {\n  const { viewport } = scrollAreaStyles();\n  return (\n    <ScrollAreaPrimitive.Viewport\n      className={viewport({ className })}\n      {...props}\n    />\n  );\n};\n\ninterface ScrollAreaScrollbarProps\n  extends ScrollAreaPrimitive.ScrollAreaScrollbarProps,\n    VariantProps<typeof scrollAreaStyles> {}\nconst ScrollAreaScrollbar = ({\n  className,\n  size,\n  ...props\n}: ScrollAreaScrollbarProps) => {\n  const { scrollbar, thumb } = scrollAreaStyles({ size });\n  return (\n    <ScrollAreaPrimitive.Scrollbar\n      className={scrollbar({ className })}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Thumb className={thumb()} />\n    </ScrollAreaPrimitive.Scrollbar>\n  );\n};\n\nconst ScrollAreaCorner = ScrollAreaPrimitive.Corner;\n\nexport type {\n  ScrollAreaProps,\n  ScrollAreaRootProps,\n  ScrollAreaViewPortProps,\n  ScrollAreaScrollbarProps,\n};\nexport {\n  ScrollArea,\n  ScrollAreaRoot,\n  ScrollAreaViewPort,\n  ScrollAreaScrollbar,\n  ScrollAreaCorner,\n};\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}