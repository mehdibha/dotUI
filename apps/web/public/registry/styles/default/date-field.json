{
  "name": "date-field",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "date-input",
    "field",
    "input"
  ],
  "files": [
    {
      "path": "core/date-field/date-field.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  DateField as AriaDateField,\r\n  type DateFieldProps as AriaDateFieldProps,\r\n  type DateValue,\r\n} from \"react-aria-components\";\r\nimport { tv, type VariantProps } from \"tailwind-variants\";\r\nimport { DateInput, DateSegment } from \"@/registry/ui/default/core/date-input\";\r\nimport { Field, type FieldProps } from \"@/registry/ui/default/core/field\";\r\nimport {\r\n  InputRoot,\r\n  type InputRootProps,\r\n  type inputStyles,\r\n} from \"@/registry/ui/default/core/input\";\r\n\r\nconst dateFieldStyles = tv({\r\n  slots: {\r\n    root: \"flex flex-col items-start gap-2\",\r\n  },\r\n});\r\n\r\ninterface DateFieldProps<T extends DateValue>\r\n  extends DateFieldRootProps<T>,\r\n    Omit<FieldProps, \"children\">,\r\n    VariantProps<typeof inputStyles> {\r\n  prefix?: React.ReactNode;\r\n  suffix?: React.ReactNode;\r\n  isLoading?: boolean;\r\n  loaderPosition?: \"prefix\" | \"suffix\";\r\n}\r\n\r\nconst DateField = <T extends DateValue>({\r\n  className,\r\n  size,\r\n  label,\r\n  description,\r\n  errorMessage,\r\n  prefix,\r\n  suffix,\r\n  isLoading,\r\n  loaderPosition = \"suffix\",\r\n  isRequired,\r\n  isDisabled,\r\n  necessityIndicator,\r\n  contextualHelp,\r\n  ...props\r\n}: DateFieldProps<T>) => {\r\n  return (\r\n    <DateFieldRoot\r\n      className={className}\r\n      isRequired={isRequired}\r\n      isDisabled={isLoading || isDisabled}\r\n      {...props}\r\n    >\r\n      <Field\r\n        label={label}\r\n        description={description}\r\n        errorMessage={errorMessage}\r\n        isRequired={isRequired}\r\n        necessityIndicator={necessityIndicator}\r\n        contextualHelp={contextualHelp}\r\n      >\r\n        <DateFieldInput\r\n          size={size}\r\n          prefix={prefix}\r\n          suffix={suffix}\r\n          isLoading={isLoading}\r\n          loaderPosition={loaderPosition}\r\n        />\r\n      </Field>\r\n    </DateFieldRoot>\r\n  );\r\n};\r\n\r\ninterface DateFieldRootProps<T extends DateValue>\r\n  extends Omit<AriaDateFieldProps<T>, \"className\"> {\r\n  className?: string;\r\n}\r\nconst DateFieldRoot = <T extends DateValue>({\r\n  className,\r\n  ...props\r\n}: DateFieldRootProps<T>) => {\r\n  const { root } = dateFieldStyles();\r\n  return <AriaDateField className={root({ className })} {...props} />;\r\n};\r\n\r\nconst DateFieldInput = (props: InputRootProps) => (\r\n  <InputRoot {...props}>\r\n    <DateInput>{(segment) => <DateSegment segment={segment} />}</DateInput>\r\n  </InputRoot>\r\n);\r\n\r\nexport type { DateFieldProps, DateFieldRootProps };\r\nexport { DateField, DateFieldRoot };\r\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}