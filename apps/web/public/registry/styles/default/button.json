{
  "name": "button",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "files": [
    {
      "path": "core/button/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  composeRenderProps,\n  Button as AriaButton,\n  Link as AriaLink,\n  type ButtonProps as AriaButtonProps,\n  type LinkProps as AriaLinkProps,\n} from \"react-aria-components\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { LoaderIcon } from \"@/lib/icons\";\nimport { focusRing } from \"@/lib/utils/styles\";\n\nconst buttonStyles = tv(\n  {\n    extend: focusRing,\n    base: \"inline-flex gap-2 cursor-pointer items-center justify-center whitespace-nowrap rounded-md leading-normal text-sm shrink-0 font-medium ring-offset-background transition-colors disabled:cursor-default disabled:bg-bg-disabled disabled:text-fg-disabled\",\n    variants: {\n      variant: {\n        default:\n          \"bg-bg-neutral hover:bg-bg-neutral-hover pressed:bg-bg-neutral-active text-fg-onNeutral\",\n        primary:\n          \"bg-bg-primary hover:bg-bg-primary-hover pressed:bg-bg-primary-active text-fg-onPrimary\",\n        quiet:\n          \"bg-transparent hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 text-fg\",\n        outline:\n          \"border border-border-field bg-transparent hover:bg-bg-inverse/10 pressed:bg-bg-inverse/20 text-fg disabled:border-border-disabled disabled:bg-transparent\",\n        accent:\n          \"bg-bg-accent hover:bg-bg-accent-hover pressed:bg-bg-accent-active text-fg-onAccent\",\n        success:\n          \"bg-bg-success hover:bg-bg-success-hover pressed:bg-bg-success-active text-fg-onSuccess\",\n        warning:\n          \"bg-bg-warning hover:bg-bg-warning-hover pressed:bg-bg-warning-active text-fg-onWarning\",\n        danger:\n          \"bg-bg-danger hover:bg-bg-danger-hover pressed:bg-bg-danger-active text-fg-onDanger\",\n      },\n      size: {\n        sm: \"h-8 px-3 [&_svg]:size-4\",\n        md: \"h-9 px-4 [&_svg]:size-4\",\n        lg: \"h-10 px-5 [&_svg]:size-5\",\n      },\n      shape: {\n        rectangle: \"\",\n        square: \"\",\n        circle: \"rounded-full\",\n      },\n    },\n    compoundVariants: [\n      {\n        size: \"sm\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-8 px-0\",\n      },\n      {\n        size: \"md\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-9 px-0\",\n      },\n      {\n        size: \"lg\",\n        shape: [\"square\", \"circle\"],\n        className: \"w-10 px-0\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      shape: \"rectangle\",\n    },\n  },\n  {\n    responsiveVariants: [\"sm\", \"lg\"],\n  }\n);\n\ninterface ButtonProps\n  extends Omit<AriaButtonProps, \"className\">,\n    Omit<AriaLinkProps, \"className\" | \"children\" | \"style\">,\n    VariantProps<typeof buttonStyles> {\n  className?: string;\n  isLoading?: boolean;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\n\nconst Button = React.forwardRef(\n  (localProps: ButtonProps, ref: React.ForwardedRef<HTMLButtonElement>) => {\n    const contextProps = useButtonContext();\n    const props = { ...contextProps, ...localProps };\n    const {\n      className,\n      variant,\n      size,\n      shape,\n      isDisabled,\n      isLoading,\n      prefix,\n      suffix,\n      ...restProps\n    } = props;\n    const Element: React.ElementType = props.href ? AriaLink : AriaButton;\n    return (\n      <Element\n        ref={ref}\n        {...restProps}\n        isDisabled={isDisabled || isLoading}\n        className={buttonStyles({ variant, size, shape, className })}\n      >\n        {composeRenderProps(props.children, (children) => (\n          <>\n            {isLoading ? (\n              <LoaderIcon aria-label=\"loading\" className=\"animate-spin\" />\n            ) : (\n              prefix\n            )}\n            {typeof children === \"string\" ? (\n              <span className=\"truncate\">{children}</span>\n            ) : (\n              children\n            )}\n            {suffix}\n          </>\n        ))}\n      </Element>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\ntype ButtonContextValue = VariantProps<typeof buttonStyles>;\nconst ButtonContext = React.createContext<ButtonContextValue>({});\nconst useButtonContext = () => {\n  return React.useContext(ButtonContext);\n};\n\nexport type { ButtonProps };\nexport { Button, buttonStyles, ButtonContext };\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}