{
  "name": "dialog",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [
    "overlay",
    "heading",
    "text"
  ],
  "files": [
    {
      "path": "core/dialog/dialog.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useSlotId } from \"@react-aria/utils\";\nimport {\n  composeRenderProps,\n  DialogContext as AriaDialogContext,\n  DialogTrigger as AriaDialogTrigger,\n  Dialog as AriaDialog,\n  type DialogProps as AriaDialogProps,\n  type DialogTriggerProps as AriaDialogTriggerProps,\n  TextContext,\n} from \"react-aria-components\";\nimport { Provider } from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { Heading } from \"@/registry/ui/default/core/heading\";\nimport { Overlay, type OverlayProps } from \"@/registry/ui/default/core/overlay\";\nimport { Text } from \"@/registry/ui/default/core/text\";\n\nconst dialogStyles = tv({\n  slots: {\n    content: [\n      \"relative outline-none rounded-[inherit] p-4 flex flex-col max-w-full\",\n      \"group-data-[type=modal]/overlay:p-6\",\n      \"group-data-[type=drawer]/overlay:pt-0\",\n    ],\n    header: \"mb-4\",\n    footer: \"flex flex-col-reverse sm:flex-row sm:justify-end gap-2 pt-4\",\n    inset:\n      \"-mx-4 group-data-[type=modal]/overlay:-mx-6 px-4 group-data-[type=modal]/overlay:px-6 py-4\",\n  },\n});\n\ntype DialogRootProps = AriaDialogTriggerProps;\nconst DialogRoot = (props: DialogRootProps) => {\n  const descriptionId = useSlotId();\n  return (\n    <Provider\n      values={[\n        [AriaDialogContext, { \"aria-describedby\": descriptionId }],\n        [TextContext, { slots: { description: { id: descriptionId } } }],\n      ]}\n    >\n      <AriaDialogTrigger {...props} />\n    </Provider>\n  );\n};\n\ninterface DialogProps extends DialogContentProps {\n  title?: string;\n  description?: string;\n  type?: OverlayProps[\"type\"];\n  showDismissButton?: OverlayProps[\"showDismissButton\"];\n  mobileType?: OverlayProps[\"mobileType\"];\n  mediaQuery?: OverlayProps[\"mediaQuery\"];\n  isDismissable?: boolean;\n}\nconst Dialog = ({\n  title,\n  description,\n  type = \"modal\",\n  mobileType = \"drawer\",\n  mediaQuery,\n  isDismissable: isDismissableProp,\n  showDismissButton,\n  ...props\n}: DialogProps) => {\n  const isDismissable =\n    isDismissableProp ?? (props.role === \"alertdialog\" ? false : true);\n  return (\n    <Overlay\n      isDismissable={isDismissable}\n      showDismissButton={showDismissButton}\n      type={type}\n      mobileType={mobileType}\n      mediaQuery={mediaQuery}\n    >\n      <DialogContent {...props}>\n        {composeRenderProps(props.children, (children) => (\n          <>\n            {(title || description) && (\n              <DialogHeader>\n                {title && <Heading>{title}</Heading>}\n                {description && <Text slot=\"description\">{description}</Text>}\n              </DialogHeader>\n            )}\n            {children}\n          </>\n        ))}\n      </DialogContent>\n    </Overlay>\n  );\n};\n\ntype DialogContentProps = AriaDialogProps;\nconst DialogContent = ({\n  children,\n  className,\n  ...props\n}: DialogContentProps) => {\n  const { content } = dialogStyles();\n  return (\n    <AriaDialog className={content({ className })} {...props}>\n      {children}\n    </AriaDialog>\n  );\n};\n\ntype DialogHeaderProps = React.ComponentProps<\"header\">;\nconst DialogHeader = ({ children, className, ...props }: DialogHeaderProps) => {\n  const { header } = dialogStyles();\n  return (\n    <header className={header({ className })} {...props}>\n      {children}\n    </header>\n  );\n};\n\ntype DialogFooterProps = React.ComponentProps<\"footer\">;\nconst DialogFooter = ({ className, ...props }: DialogFooterProps) => {\n  const { footer } = dialogStyles();\n  return <footer className={footer({ className })} {...props} />;\n};\n\ntype DialogInsetProps = React.ComponentProps<\"div\">;\nconst DialogInset = ({ className, ...props }: DialogInsetProps) => {\n  const { inset } = dialogStyles();\n  return <div className={inset({ className })} {...props} />;\n};\n\nexport type {\n  DialogRootProps,\n  DialogProps,\n  DialogContentProps,\n  DialogHeaderProps,\n  DialogFooterProps,\n  DialogInsetProps,\n};\nexport {\n  DialogRoot,\n  DialogContent,\n  Dialog,\n  DialogHeader,\n  DialogFooter,\n  DialogInset,\n};\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}