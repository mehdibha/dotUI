{
  "name": "field",
  "type": "registry:core",
  "dependencies": [
    "react-aria-components"
  ],
  "files": [
    {
      "path": "core/field/field.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  Label as AriaLabel,\n  Text as AriaText,\n  FieldError as AriaFieldError,\n  FieldErrorContext as AriaFieldErrorContext,\n  type TextProps as AriaTextProps,\n  type LabelProps as AriaLabelProps,\n  type FieldErrorProps as AriaFieldErrorProps,\n} from \"react-aria-components\";\nimport { tv } from \"tailwind-variants\";\nimport { AsteriskIcon } from \"@/lib/icons\";\n\nconst fieldStyles = tv({\n  slots: {\n    root: \"flex flex-col gap-2 items-start\",\n    label:\n      \"text-sm inline-flex items-center gap-px font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:text-fg-disabled [&_svg]:size-3\",\n    description: \"text-xs text-fg-muted\",\n    fieldError: \"text-xs text-fg-danger\",\n  },\n});\n\ntype LabelProps = AriaLabelProps & {\n  isRequired?: boolean;\n  necessityIndicator?: \"label\" | \"icon\";\n};\nconst Label = ({\n  className,\n  children,\n  isRequired,\n  necessityIndicator,\n  ...props\n}: LabelProps) => {\n  const { label } = fieldStyles();\n  const necessityLabel = isRequired ? \"(required)\" : \"(optional)\";\n  return (\n    <AriaLabel className={label({ className })} {...props}>\n      {children}\n      {isRequired && (\n        <span aria-hidden>{necessityIndicator === \"icon\" ? <></> : <></>}</span>\n      )}\n      {(necessityIndicator === \"label\" ||\n        (necessityIndicator === \"icon\" && isRequired)) &&\n        \" \\u200b\"}\n      {necessityIndicator === \"label\" && (\n        <span aria-hidden>{necessityLabel}</span>\n      )}\n      {necessityIndicator === \"icon\" && isRequired && <AsteriskIcon />}\n    </AriaLabel>\n  );\n};\n\ntype DescriptionProps = AriaTextProps;\nconst Description = ({ className, ...props }: DescriptionProps) => {\n  const { description } = fieldStyles();\n  return (\n    <AriaText\n      {...props}\n      slot=\"description\"\n      className={description({ className })}\n    />\n  );\n};\n\ntype FieldErrorProps = Omit<AriaFieldErrorProps, \"className\"> & {\n  className?: string;\n};\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n  const { fieldError } = fieldStyles();\n  return <AriaFieldError {...props} className={fieldError({ className })} />;\n};\n\ninterface HelpTextProps {\n  errorMessage?: FieldErrorProps[\"children\"];\n  description?: DescriptionProps[\"children\"];\n}\nconst HelpText = (props: HelpTextProps) => {\n  const { errorMessage, description } = props;\n  const validation = React.useContext(AriaFieldErrorContext);\n  const isErrorMessage =\n    validation?.isInvalid &&\n    (!!errorMessage || validation.validationErrors.length > 0);\n  const hasHelpText = !!description || isErrorMessage;\n\n  if (!hasHelpText) return null;\n\n  return isErrorMessage ? (\n    <FieldError>{errorMessage}</FieldError>\n  ) : (\n    <Description>{description}</Description>\n  );\n};\n\ninterface FieldProps extends HelpTextProps {\n  label?: LabelProps[\"children\"];\n  isRequired?: LabelProps[\"isRequired\"];\n  necessityIndicator?: LabelProps[\"necessityIndicator\"];\n  contextualHelp?: React.ReactNode;\n  children?: React.ReactNode;\n}\nconst Field = (props: FieldProps) => {\n  const {\n    children,\n    label,\n    isRequired,\n    necessityIndicator,\n    contextualHelp,\n    ...helpTextProps\n  } = props;\n  return (\n    <>\n      {label && contextualHelp && (\n        <span className=\"flex items-center gap-2\">\n          <Label\n            isRequired={isRequired}\n            necessityIndicator={necessityIndicator}\n          >\n            {label}\n          </Label>\n          {contextualHelp}\n        </span>\n      )}\n      {label && !contextualHelp && (\n        <Label isRequired={isRequired} necessityIndicator={necessityIndicator}>\n          {label}\n        </Label>\n      )}\n      {children}\n      <HelpText {...helpTextProps} />\n    </>\n  );\n};\nField.displayName = \"Field\";\n\nexport type {\n  LabelProps,\n  DescriptionProps,\n  FieldErrorProps,\n  HelpTextProps,\n  FieldProps,\n};\nexport { Label, Description, FieldError, HelpText, Field, fieldStyles };\n",
      "type": "registry:core",
      "target": ""
    }
  ]
}