{
  "name": "alert",
  "type": "registry:core",
  "files": [
    {
      "path": "core/alert/alert.tsx",
      "content": "import * as React from \"react\";\nimport { tv, type VariantProps } from \"tailwind-variants\";\nimport { DangerIcon, InfoIcon, SuccessIcon, WarningIcon } from \"@/__icons__\";\n\nconst alertStyles = tv({\n  slots: {\n    root: \"rounded-lg border p-4 flex items-center gap-4 [&_svg]:size-4\",\n    title: \"font-medium leading-normal tracking-tight mr-1\",\n    content: \"text-sm\",\n  },\n  variants: {\n    variant: {\n      default: { root: \"border text-fg\" },\n      success: { root: \"border border-border-success text-fg-success\" },\n      warning: { root: \"border border-border-warning text-fg-warning\" },\n      danger: { root: \"border border-border-danger text-fg-danger\" },\n      info: { root: \"border border-border-accent text-fg-accent\" },\n    },\n    fill: {\n      true: \"\",\n    },\n  },\n  compoundVariants: [\n    { variant: \"default\", fill: true, className: { root: \"bg-bg-muted\" } },\n    {\n      variant: \"success\",\n      fill: true,\n      className: { root: \"bg-bg-success-muted\" },\n    },\n    {\n      variant: \"warning\",\n      fill: true,\n      className: { root: \"bg-bg-warning-muted\" },\n    },\n    {\n      variant: \"danger\",\n      fill: true,\n      className: { root: \"bg-bg-danger-muted\" },\n    },\n    { variant: \"info\", fill: true, className: { root: \"bg-bg-accent-muted\" } },\n  ],\n  defaultVariants: {\n    variant: \"default\",\n    fill: false,\n  },\n});\n\nconst icons = {\n  default: <InfoIcon />,\n  success: <SuccessIcon />,\n  warning: <WarningIcon />,\n  danger: <DangerIcon />,\n  info: <InfoIcon />,\n};\n\ninterface AlertProps extends AlertRootProps {\n  title?: React.ReactNode;\n  icon?: React.ReactNode | null;\n  action?: React.ReactNode;\n}\nconst Alert = ({\n  variant = \"default\",\n  title,\n  children,\n  icon,\n  action,\n  ...props\n}: AlertProps) => {\n  return (\n    <AlertRoot variant={variant} {...props}>\n      {icon || icons[variant]}\n      <div className=\"flex-1 space-y-0.5\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {children && <AlertContent>{children}</AlertContent>}\n      </div>\n      {action && <div className=\"shrink-0\">{action}</div>}\n    </AlertRoot>\n  );\n};\n\ninterface AlertRootProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"title\">,\n    VariantProps<typeof alertStyles> {}\nconst AlertRoot = ({ className, variant, fill, ...props }: AlertRootProps) => {\n  const { root } = alertStyles({ variant, fill });\n  return <div role=\"alert\" className={root({ className })} {...props} />;\n};\n\ninterface AlertTitleProps\n  extends React.HTMLAttributes<HTMLHeadingElement>,\n    VariantProps<typeof alertStyles> {} // TODO VERIFY THIS\nconst AlertTitle = ({ className, ...props }: AlertTitleProps) => {\n  const { title } = alertStyles();\n  return <h3 className={title({ className })} {...props} />;\n};\n\ninterface AlertContentProps\n  extends React.HTMLAttributes<HTMLElement>,\n    VariantProps<typeof alertStyles> {} // TODO VERIFY THIS\nconst AlertContent = ({ className, ...props }: AlertContentProps) => {\n  const { content } = alertStyles();\n  return <section className={content({ className })} {...props} />;\n};\n\nexport type { AlertProps, AlertRootProps, AlertTitleProps, AlertContentProps };\nexport { Alert, AlertRoot, AlertTitle, AlertContent };\n",
      "type": "registry:core",
      "target": "core/alert.tsx"
    }
  ]
}